{"meta":{"title":"小贪心","subtitle":null,"description":"小贪心的博客","author":"littleGreedy","url":""},"pages":[{"title":"DemoC","date":"2019-08-27T11:26:06.000Z","updated":"2019-08-27T11:34:35.957Z","comments":false,"path":"index.html","permalink":"/index.html","excerpt":"","text":"","keywords":null},{"title":"404 Not Found：呀！迷路了......","date":"2019-08-26T12:43:23.242Z","updated":"2019-08-13T08:20:14.672Z","comments":false,"path":"/404.html","permalink":"//404.html","excerpt":"","text":"&lt;!DOCTYPE html&gt; 万恶の 404"},{"title":"catchme","date":"2019-08-08T09:16:47.000Z","updated":"2019-08-08T09:21:53.294Z","comments":true,"path":"catchme/index.html","permalink":"/catchme/index.html","excerpt":"","text":""},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"categories","date":"2019-08-02T15:44:03.000Z","updated":"2019-08-02T15:44:29.613Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-08-21T09:18:11.369Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"Android Edition 敬请期待~直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"booklist","date":"2019-09-08T05:30:55.000Z","updated":"2019-09-29T09:27:25.552Z","comments":false,"path":"booklist/index.html","permalink":"/booklist/index.html","excerpt":"","text":"My own Book List “读经而已,不足以知经” #Wish List… R for Data Science Which also named as Data Science with R in Hands-On Programming with R. Read online or PDF 荣光时刻 丘吉尔随笔集，是其重要作品之一。 Detail #I am Reading 资本论 此书深刻地分析了资本主义商品生产、流通和分配，揭示了经济发展的客观规律。 Detail &amp; Edition 牛奶可乐经济学 一部“博物经济学”著作，它非学术大部头，而只是生活小智慧。 Detail Python极客项目编程 Python 是一种强大的编程语言。本书包含了一组富有想象力的编程项目，它们将引导你用Python 来制作图像和音乐、模拟现实世界的现象。 Detail 编程之美-微软技术面试心得 作者试图从书中各种有趣的问题出发，引导读者发现问题，分析问题，解决问题，寻找更优的解法。 Detail # I like… 草房子 曹文轩笔下的最美文学，以男孩桑桑的视角，看待一组组在乡间发生的温情故事。 Detail 秘密花园 灰暗的世界瞬间变得五光十色起来。 Detail 独闯天下这是达尔自传《好小子-童年故事》的续集。 Detail 我的早年生活 概观全书，读者不难发现书中描绘的是一个已逝去的年代，通过丘吉尔人们可以看到变化中的社会：从社会性质、政治基础、战争、年轻人的世界观到价值体系等等。 Detail","keywords":null},{"title":"rank","date":"2019-08-07T03:37:39.000Z","updated":"2019-08-07T03:45:30.934Z","comments":true,"path":"rank/index.html","permalink":"/rank/index.html","excerpt":"","text":"AV.initialize(\"填你的appid\", \"填你的appkey\"); var time=0 var title=\"\" var url=\"\" var query = new AV.Query('Counter'); query.notEqualTo('id',0); query.descending('time'); query.limit(15); query.find().then(function (todo) { for (var i=0;i"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-09-20T16:08:06.432Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"保护伞开源委员会·洛林实验室程序试验场","keywords":"Open Source Committee Lorraine Laboratory"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-10-03T13:36:25.328Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のlittleGreedy] 与&nbsp; Zero&nbsp; （ 小 零 号（ゼロ） ） 对话中... function bot_ui_ini() { var botui = new BotUI(\"hello-mashiro\"); botui.message.add({ delay: 800, content: \"Hi, there111👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 Mashiro\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个可爱的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"目前就读于上海财经大学\" }).then(function () { botui.message.add({ delay: 1500, content: \"向往技术却误入商科，但后来喜欢上了经济学…\" }).then(function () { botui.message.add({ delay: 1200, content: \"因为数据分析也需要Coder嘛\" }).then(function () { botui.message.add({ delay: 1500, content: \"主攻 R 语言和 Python，略懂 STATA，偶尔也折腾 HTML/CSS/JavaScript/PHP\" }).then(function () { botui.message.add({ delay: 1500, content: \"研究的方向，是经济/金融方向的数据分析（data science）以及机器学习（machine learning）\" }).then(function () { botui.message.add({ delay: 1800, content: \"喜欢画画，希望有一天能够被称为画师\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫Mashiro呢？ 🤔\", value: \"why-mashiro\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"Mashiro以及站名都来自一部动画，因为和主角有一样的爱好~ 如果有兴趣可以找找首页上的视频~\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"为什么是白猫呢？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"因为对GitHub有种执念… \" }).then(function () { botui.message.add({ delay: 1100, content: \"而且我真的是猫控！\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"域名有什么含意吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，看备案信息你就知道了=.= 本来想要zheng.xin的，但50万真买不起。。\" }).then(function () { botui.message.add({ delay: 1600, content: \"那么，仔细看看我的博客吧？ ^_^\" }) }) } } bot_ui_ini() function bot_ui_ini() { var botui = new BotUI(\"hello-littlezero\"); botui.message.add({ delay: 800, content: \"Hi, there111👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 Zero\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个可爱的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"隐藏颇深的历史、物理学爱好者，典型的半文半理的工科男\" }).then(function () { botui.message.add({ delay: 1200, content: \"喜爱计算机科学，立志读研深造\" }).then(function () { botui.message.add({ delay: 1200, content: \"希望有一天能搞出点大事件 😀\" }).then(function () { botui.message.add({ delay: 1500, content: \"现役Code Student，有空就喜欢写点应用型小程序练练手感、丰富一下生活~\" }).then(function () { botui.message.add({ delay: 1500, content: \"初高中时喜欢修改游戏代码，大学的我正在学习 Java / Python 语言，偶尔捣鼓 HTML/CSS/JavaScript\" }).then(function () { botui.message.add({ delay: 1200, content: \"在本专业领域，目前主要折腾 算法\" }).then(function () { botui.message.add({ delay: 1500, content: \"老家浙江，未来打算“固守”江浙一线~😀\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫littlezero呢？ 🤔\", value: \"why-littlezero\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"零号来自一本书里的角色，因为每次对其出场都惊喜不已，遂取littlezero小零号为名~ \" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"为什么昵称是小贪心呢？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"因为对贪心算法有种执念… \" }).then(function () { botui.message.add({ delay: 1300, content: \"贪心里有个富有人生哲理的概念：“ 局部选取最优解。” \" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"域名有什么含意吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，看备案信息你就知道了=.= 本来想要zero的，但真滴买不到。。。\" }).then(function () { botui.message.add({ delay: 1600, content: \"那么，请仔细看看我的博客吧？ ^_^\" }) }) } } bot_ui_ini() Last updated in&nbsp;Oct. 3rd, 2019 2019/8/24 全面修复已知BUG； 2019/8/9 启用CDN加速； 2019/8/8 改用新主题Sakura； 2019/8/5 起使用Icarus主题； 2019/7/23 搭建Hexo并启用Yilia主题；","keywords":"关于"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-10-06T17:16:14.373Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"","date":"2019-08-26T16:02:56.794Z","updated":"2019-08-26T16:02:56.794Z","comments":true,"path":"test/index.html","permalink":"/test/index.html","excerpt":"","text":"&lt;!DOCTYPE html&gt; Echarts //��������д���js���� &amp;copy 2019 Made with 💗 by littleGreedy"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-09-20T16:15:33.206Z","comments":true,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"","date":"2019-08-24T10:47:02.287Z","updated":"2019-08-24T10:47:02.271Z","comments":true,"path":"about/toloadaplayer/music.js","permalink":"/about/toloadaplayer/music.js","excerpt":"","text":"const ap = new APlayer({ container: document.getElementById('aplayer'), fixed: true, autoplay: false, audio: [ { name: \"��һ��Ҫ�Ҹ�\", artist: '�����', url: 'http://www.ytmp3.cn/down/51689.mp3', cover: 'http://img.ytmp3.cn/image/52.jpg', }, { name: 'һ���������(Live)', artist: 'Ħ���ֵ�', url: 'http://www.ytmp3.cn/down/52772.mp3', cover: 'http://img.ytmp3.cn/image/53.jpg', }, { name: 'The Rose', artist: 'Westlife', url: 'http://www.ytmp3.cn/down/56694.mp3', cover: 'http://img.ytmp3.cn/image/51.jpg', }, { name: 'In The Eyes', artist: '��ӳ��', url: 'http://www.ytmp3.cn/down/53053.mp3', cover: 'http://img.ytmp3.cn/image/10.jpg', } ] });"},{"title":"","date":"2019-08-08T11:34:47.188Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"about/toloadaplayer/APlayer.min.css","permalink":"/about/toloadaplayer/APlayer.min.css","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/"},{"title":"","date":"2019-08-26T16:02:18.982Z","updated":"2019-08-26T15:07:54.831Z","comments":true,"path":"test/lib/test.js","permalink":"/test/lib/test.js","excerpt":"","text":"// 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('main')); // 指定图表的配置项和数据 option = { backgroundColor: '#2c343c', visualMap: { show: false, min: 80, max: 600, inRange: { colorLightness: [0, 1] } }, series : [ { name: '访问来源', type: 'pie', radius: '55%', data:[ {value:80.15, name:'恶性肿瘤'}, {value:200, name:'肝硬化'}, {value:211, name:'冠心病'}, {value:350, name:'高血压'}, {value:362.85, name:'糖尿病'}, {value:390.3, name:'慢性气管炎'} ], roseType: 'angle', label: { normal: { textStyle: { color: 'rgba(255, 255, 255, 0.3)' } } }, labelLine: { normal: { lineStyle: { color: 'rgba(255, 255, 255, 0.3)' } } }, itemStyle: { normal: { color: '#c23531', shadowBlur: 200, shadowColor: 'rgba(0, 0, 0, 0.5)' } } } ] }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('main2')); n=500; option = { backgroundColor:\"#2c343c\", //\"#0B1837\", color: [\"#EAEA26\", \"#906BF9\", \"#FE5656\", \"#01E17E\", \"#3DD1F9\", \"#FFAD05\"], // title: { // text: '网络/安全设备', // left: '60', // top: 0, // textAlign: 'center', // textStyle: { // color: '#fff', // fontSize: 14, // fontWeight: 0 // } // }, grid: { left: -100, top: 50, bottom: 10, right: 10, containLabel: true }, tooltip: { trigger: 'item', formatter: \"{b} : {c} ({d}%)\" }, legend: { type: \"scroll\", orient: \"vartical\", // x: \"right\", top: \"center\", right: \"15\", // bottom: \"0%\", itemWidth: 16, itemHeight: 8, itemGap: 16, textStyle: { color: '#A3E2F4', fontSize: 12, fontWeight: 0 }, data: ['IDS', 'VPN', '交换机', '防火墙', 'WAF', '堡垒机'] }, polar: {}, angleAxis: { interval: 1, type: 'category', data: [], z: 10, axisLine: { show: false, lineStyle: { color: \"#0B4A6B\", width: 1, type: \"solid\" }, }, axisLabel: { interval: 0, show: true, color: \"#0B4A6B\", margin: 8, fontSize: 16 }, }, radiusAxis: { min: 40, max: 120, interval: 20, axisLine: { show: false, lineStyle: { color: \"#0B3E5E\", width: 1, type: \"solid\" }, }, axisLabel: { formatter: '{value} %', show: false, padding: [0, 0, 20, 0], color: \"#0B3E5E\", fontSize: 16 }, splitLine: { lineStyle: { color: \"#0B3E5E\", width: 2, type: \"solid\" } } }, calculable: true, series: [{ type: 'pie', radius: [\"5%\", \"10%\"], hoverAnimation: false, labelLine: { normal: { show: false, length: 30, length2: 55 }, emphasis: { show: false } }, data: [{ name: '', value: 0, itemStyle: { normal: { color: \"#0B4A6B\" } } }] }, { type: 'pie', radius: [\"90%\", \"95%\"], hoverAnimation: false, labelLine: { normal: { show: false, length: 30, length2: 55 }, emphasis: { show: false } }, name: \"\", data: [{ name: '', value: 0, itemStyle: { normal: { color: \"#0B4A6B\" } } }] },{ stack: 'a', type: 'pie', radius: ['20%', '80%'], roseType: 'area', zlevel:10, label: { normal: { show: true, formatter: \"{c}\", textStyle: { fontSize: 12, }, position: 'outside' }, emphasis: { show: true } }, labelLine: { normal: { show: true, length: 20, length2: 55 }, emphasis: { show: false } }, data: [ {value:80.15/n, name:'恶性肿瘤'}, {value:200/n, name:'肝硬化'}, {value:211/n, name:'冠心病'}, {value:350/n, name:'高血压'}, {value:362.85/n, name:'糖尿病'}, {value:0.7806, name:'慢性气管炎'} ] }, ] } myChart.setOption(option); var myChart = echarts.init(document.getElementById('main3')); var chinaGeoCoordMap = { '南京': [118.78,32.04], '南昌':[115.89,28.68], '淮安': [119.15,33.5], '郑州':[113.65,34.76], '上海': [121.4648, 31.2891] }; var chinaDatas = [ [{name: '南京', value: 1}], [{name: '淮安', value: 0}], [{name: '南昌', value: 0}], [{name: '郑州', value: 0}], [{ name: '上海', value: 0 }] ]; var convertData = function(data) { var res = []; for(var i = 0; i < data.length; i++) { var dataItem = data[i]; var fromCoord = chinaGeoCoordMap[dataItem[0].name]; var toCoord = [118.78,32.04]; if(fromCoord && toCoord) { res.push([{ coord: fromCoord, value: dataItem[0].value }, { coord: toCoord, }]); } } return res; }; var series = []; [['南京', chinaDatas]].forEach(function(item, i) { console.log(item) series.push({ type: 'lines', zlevel: 2, effect: { show: true, period: 4, //箭头指向速度，值越小速度越快 trailLength: 0.02, //特效尾迹长度[0,1]值越大，尾迹越长重 symbol: 'arrow', //箭头图标 symbolSize: 5, //图标大小 }, lineStyle: { normal: { width: 1, //尾迹线条宽度 opacity: 1, //尾迹线条透明度 curveness: .3 //尾迹线条曲直度 } }, data: convertData(item[1]) }, { type: 'effectScatter', coordinateSystem: 'geo', zlevel: 2, rippleEffect: { //涟漪特效 period: 4, //动画时间，值越小速度越快 brushType: 'stroke', //波纹绘制方式 stroke, fill scale: 4 //波纹圆环最大限制，值越大波纹越大 }, label: { normal: { show: true, position: 'right', //显示位置 offset: [5, 0], //偏移设置 formatter: function(params){//圆环显示文字 return params.data.name; }, fontSize: 13 }, emphasis: { show: true } }, symbol: 'circle', symbolSize: function(val) { return 10+ val[2] * 5; //圆环大小 }, itemStyle: { normal: { show: false, color: '#f00' } }, data: item[1].map(function(dataItem) { return { name: dataItem[0].name, value: chinaGeoCoordMap[dataItem[0].name].concat([dataItem[0].value]) }; }), }, //被攻击点 { type: 'scatter', coordinateSystem: 'geo', zlevel: 2, rippleEffect: { period: 4, brushType: 'stroke', scale: 4 }, label: { normal: { show: false, position: 'right', //offset:[5, 0], color: '#0f0', formatter: '{b}', textStyle: { color: \"#0f0\" } }, emphasis: { show: true, color: \"#f60\" } }, symbol: 'pin', symbolSize: 50, data: [{ name: item[0], value: chinaGeoCoordMap[item[0]].concat([10]), }], } ); }); option = { tooltip: { trigger: 'item', backgroundColor: 'rgba(166, 200, 76, 0.82)', borderColor: '#FFFFCC', showDelay: 0, hideDelay: 0, enterable: true, transitionDuration: 0, extraCssText: 'z-index:100', formatter: function(params, ticket, callback) { //根据业务自己拓展要显示的内容 var res = \"\"; var name = params.name; var value = params.value[params.seriesIndex + 1]; res = \"\" + name + \"数据：\" + value; return res; } }, backgroundColor:\"#013954\", visualMap: { //图例值控制 min: 0, max: 1, calculable: true, show: true, color: ['#f44336', '#fc9700', '#ffde00', '#ffde00', '#00eaff'], textStyle: { color: '#fff' } }, geo: { map: 'china', zoom: 1.2, label: { emphasis: { show: false } }, roam: false, //是否允许缩放 itemStyle: { normal: { color: 'rgba(51, 69, 89, .5)', //地图背景色 borderColor: '#516a89', //省市边界线00fcff 516a89 borderWidth: 1 }, emphasis: { color: 'rgba(37, 43, 61, .5)' //悬浮背景 } } }, series: series }; myChart.setOption(option);"},{"title":"","date":"2019-08-09T10:56:15.190Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"about/toloadaplayer/APlayer.min.js","permalink":"/about/toloadaplayer/APlayer.min.js","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;nt&&!e.player.audio.paused&&(e.player.container.classList.remove(\"aplayer-loading\"),i=!1),t=n)},100)}},{key:\"enable\",value:function(e){this[\"enable\"+e+\"Checker\"]=!0,\"fps\"===e&&this.initfpsChecker()}},{key:\"disable\",value:function(e){this[\"enable\"+e+\"Checker\"]=!1}},{key:\"destroy\",value:function(){var e=this;this.types.forEach(function(t){e[\"enable\"+t+\"Checker\"]=!1,e[t+\"Checker\"]&&clearInterval(e[t+\"Checker\"])})}}]),e}();t.default=a},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1?\"one\"===e.player.options.loop?(e.player.options.loop=\"none\",e.player.template.loop.innerHTML=r.default.loopNone):\"none\"===e.player.options.loop?(e.player.options.loop=\"all\",e.player.template.loop.innerHTML=r.default.loopAll):\"all\"===e.player.options.loop&&(e.player.options.loop=\"one\",e.player.template.loop.innerHTML=r.default.loopOne):\"one\"===e.player.options.loop||\"all\"===e.player.options.loop?(e.player.options.loop=\"none\",e.player.template.loop.innerHTML=r.default.loopNone):\"none\"===e.player.options.loop&&(e.player.options.loop=\"all\",e.player.template.loop.innerHTML=r.default.loopAll)})}},{key:\"initMenuButton\",value:function(){var e=this;this.player.template.menu.addEventListener(\"click\",function(){e.player.list.toggle()})}},{key:\"initMiniSwitcher\",value:function(){var e=this;this.player.template.miniSwitcher.addEventListener(\"click\",function(){e.player.setMode(\"mini\"===e.player.mode?\"normal\":\"mini\")})}},{key:\"initSkipButton\",value:function(){var e=this;this.player.template.skipBackButton.addEventListener(\"click\",function(){e.player.skipBack()}),this.player.template.skipForwardButton.addEventListener(\"click\",function(){e.player.skipForward()}),this.player.template.skipPlayButton.addEventListener(\"click\",function(){e.player.toggle()})}},{key:\"initLrcButton\",value:function(){var e=this;this.player.template.lrcButton.addEventListener(\"click\",function(){e.player.template.lrcButton.classList.contains(\"aplayer-icon-lrc-inactivity\")?(e.player.template.lrcButton.classList.remove(\"aplayer-icon-lrc-inactivity\"),e.player.lrc&&e.player.lrc.show()):(e.player.template.lrcButton.classList.add(\"aplayer-icon-lrc-inactivity\"),e.player.lrc&&e.player.lrc.hide())})}}]),e}();t.default=s},function(e,t,n){var i=n(2);e.exports=function(e){\"use strict\";e=e||{};var t=\"\",n=i.$each,a=e.lyrics,r=(e.$value,e.$index,i.$escape);return n(a,function(e,n){t+=\"\\n \" ,t+=\"r(e[1]),t+=\"this.current.length-1||e=this.current[this.index+1][0])for(var t=0;t=this.current[t][0]&&(!this.current[t+1]||e=200&&n.status/g,\"\").replace(/^\\s+|\\s+$/g,\"\");if(r)for(var s=r.length,l=0;l]/;a.$escape=function(e){return function(e){var t=\"\"+e,n=r.exec(t);if(!n)return e;var i=\"\",a=void 0,o=void 0,s=void 0;for(a=n.index,o=0;a\\n \\n \" ,l(n(1)(u({theme:a.theme,audio:a.audio,index:1}))),t+=\"\\n \\n\\n\\n \\n ',t+=s.play,t+='\\n \\n \\n \\n No audio\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n ',t+=s.loading,t+='\\n \\n \\n \\n \\n \\n \\n 00:00 / 00:00\\n \\n \\n ',t+=s.skip,t+='\\n \\n \\n ',t+=s.play,t+='\\n \\n \\n ',t+=s.skip,t+='\\n \\n \\n \\n ',t+=s.volumeDown,t+='\\n \\n \\n \\n \\n \\n \\n \\n \\n ',\"list\"===a.order?t+=s.orderList:\"random\"===a.order&&(t+=s.orderRandom),t+='\\n \\n \\n ',\"one\"===a.loop?t+=s.loopOne:\"all\"===a.loop?t+=s.loopAll:\"none\"===a.loop&&(t+=s.loopNone),t+='\\n \\n \\n ',t+=s.menu,t+='\\n \\n \\n ',t+=s.lrc,t+='\\n \\n \\n \\n \\n \\n ',t+=s.right,t+='\\n\\n\\n \\n \" ,l(n(1)(u({theme:a.theme,audio:a.audio,index:1}))),t+=\"\\n \\n\\n\" ),t}},function(e,t,n){\"use strict\";object.defineproperty(t,\"__esmodule\",{value:!0});var i=\"function(){function\" e(e,t){for(var n=\"0;n0?this.template.volumeButton.innerHTML=o.default.volumeDown:this.template.volumeButton.innerHTML=o.default.volumeOff}},{key:\"volume\",value:function(e,t){return e=parseFloat(e),isNaN(e)||(e=Math.max(e,0),e=Math.min(e,1),this.bar.set(\"volume\",e,\"height\"),t||this.storage.set(\"volume\",e),this.audio.volume=e,this.audio.muted&&(this.audio.muted=!1),this.switchVolumeIcon()),this.audio.muted?0:this.audio.volume}},{key:\"on\",value:function(e,t){this.events.on(e,t)}},{key:\"toggle\",value:function(){this.template.button.classList.contains(\"aplayer-play\")?this.play():this.template.button.classList.contains(\"aplayer-pause\")&&this.pause()}},{key:\"switchAudio\",value:function(e){this.list.switch(e)}},{key:\"addAudio\",value:function(e){this.list.add(e)}},{key:\"removeAudio\",value:function(e){this.list.remove(e)}},{key:\"destroy\",value:function(){m.splice(m.indexOf(this),1),this.pause(),this.container.innerHTML=\"\",this.audio.src=\"\",this.timer.destroy(),this.events.trigger(\"destroy\")}},{key:\"setMode\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"normal\";this.mode=e,\"mini\"===e?this.container.classList.add(\"aplayer-narrow\"):\"normal\"===e&&this.container.classList.remove(\"aplayer-narrow\")}},{key:\"notice\",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.8;this.template.notice.innerHTML=e,this.template.notice.style.opacity=i,this.noticeTime&&clearTimeout(this.noticeTime),this.events.trigger(\"noticeshow\",{text:e}),n&&(this.noticeTime=setTimeout(function(){t.template.notice.style.opacity=0,t.events.trigger(\"noticehide\")},n))}},{key:\"prevIndex\",value:function(){if(!(this.list.audios.length>1))return 0;if(\"list\"===this.options.order)return this.list.index-11))return 0;if(\"list\"===this.options.order)return(this.list.index+1)%this.list.audios.length;if(\"random\"===this.options.order){var e=this.randomOrder.indexOf(this.list.index);return e===this.randomOrder.length-1?this.randomOrder[0]:this.randomOrder[e+1]}}},{key:\"skipBack\",value:function(){this.list.switch(this.prevIndex())}},{key:\"skipForward\",value:function(){this.list.switch(this.nextIndex())}},{key:\"duration\",get:function(){return isNaN(this.audio.duration)?0:this.audio.duration}}],[{key:\"version\",get:function(){return\"1.10.1\"}}]),e}();t.default=g},,function(e,t,n){},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n(40);var i,a=n(38),r=(i=a)&&i.__esModule?i:{default:i};console.log(\"\\n %c APlayer v1.10.1 af84efb %c http://aplayer.js.org \\n\",\"color: #fadfa3; background: #030307; padding:5px 0;\",\"background: #fadfa3; padding:5px 0;\"),t.default=r.default}]).default}); //# sourceMappingURL=APlayer.min.js.map"}],"posts":[{"title":"“loveActually”","slug":"“loveActually”","date":"2019-10-07T15:04:49.000Z","updated":"2019-10-07T15:04:49.839Z","comments":true,"path":"20191007“loveActually”/","link":"","permalink":"/20191007“loveActually”/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"【数论】康托展开与逆康托展开","slug":"cantor","date":"2019-10-03T12:37:11.000Z","updated":"2019-10-03T15:28:43.959Z","comments":true,"path":"20191003cantor/","link":"","permalink":"/20191003cantor/","excerpt":"","text":"康托展开涉及了组合数学的知识，他的定义是一个全排列到一个自然数的双射，常用于构建哈希表时的空间压缩。 康托展开的实质是计算当前排列在所有由小到大全排列中的名次，因此是可逆的。 效果：给定一个序列计算比序列组合小的总个数。 （比如封面图的晓响雷电，给她们标号，可求比该序数排列组合小的拍照顺序总数） 假设有 {1， 2， 3} 这三个数，那么全部的排列组合有 6种，按从小到大的顺序有 123, 132，213， 231， 312， 321。 而康托展开能以O(N^2)求出比某个排序组合小的个数。比如说 比 213 小的数有2个，比312小的数有4个。 原理：X = A[0] (n-1)! + A[1] (n-2)! + … + A[n-1] * 0! A[i] 指的是位于位置i后面的数小于A[i]值的个数,后面乘的就是后面还有多少个数的阶乘 这个算出来的数康拖展开值，是在所有排列次序 - 1的值，因此X+1即为在全排列中的次序 例子 ：在（1，2，3，4，5）5个数的排列组合中，计算 34152的康托展开值。带入上面的公式 X = 2 4! + 2 3! + 0 2! + 1 1! + 0 * 0!=&gt;X = 61 什么你上面的有点没看懂？ 不急这有文字描述版~假设有 {1，2， 3， 4} 这4个数，根据组合数学的知识，一共有 4*3*2*1种排序组合。 比如说3421（且看封面图的晓响雷电，给她们标号为3421，求比3421排序组合小的拍照顺序总数） 首位3，比3小的且之前没出现的数有1、2，那么就有2*3！ 次位4，比四小的数有1、2、3，但已经出现在首位了，所以共有两位，即1、2，那么有2*2！ 第三位2，比2小的只有1，且首位次位无1，那么就有1*1！ 则 2*3！+2*2！+1*1！就是比3421排序组合小的总个数。 总结：从首位3开始到倒数第二位截至，找出比当前这位数小的个数，且之前没有出现过的数的个数乘以对应阶乘，累加结果就是我们要求的值。 3.用途：这种技巧也能够运用在状态压缩上面，某个排序组合有 x个比它小的排序组合，那么可以给这种排序组合编号为x，可以保证不会有编号重叠的情况，实现符号压缩。 可以用于前篇的爬虫文件名命名中 逆康托展开康拖展开是从序列到自然数的映射且是可逆的，那么逆康拖展开便是从自然数到序列的映射例子 ：在（1，2，3，4，5) 给出61可以算出起排列组合为34152具体过程如下：用 61 / 4! = 2余13，说明 ,说明比首位小的数有2个，所以首位为3。用 13 / 3! = 2余1，说明 ，说明在第二位之后小于第二位的数有2个，所以第二位为4。用 1 / 2! = 0余1，说明 ，说明在第三位之后没有小于第三位的数，所以第三位为1。用 1 / 1! = 1余0，说明 ，说明在第二位之后小于第四位的数有1个，所以第四位为5。 总结：在已知编号的情况下，也能够通过编号还原排列组合。顺序反过来就行了。 代码实现 int cantor(char* ss) { // 先往 n[] 存放阶乘的结果 int ret = 0; for(int i = 0; i &lt; 9; ++i) { int cnt = 0; for(int j = i+1; j &lt; 9; ++j) { if(ss[j] &lt; ss[i]) cnt++; } ret += cnt*n[8-i]; } return ret; } void decantor(int num, char *ss) { int p = 0; bool v[10]; memset(v, false, sizeof(v)); for(int i = 8; i &gt;= 0; --i) { int cnt = 0, tmp = num/n[i]; num %= n[i]; for(int j = 0; j &lt; 9; ++j) { if(v[j]) continue; if(cnt == tmp) { ss[p++] = j+&#39;0&#39;; v[j] = true; break; } cnt++; } } ss[p] = &#39;\\0&#39;; } ​","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[],"keywords":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}]},{"title":"图库爬虫","slug":"webSpiderPhoto","date":"2019-10-02T13:59:07.000Z","updated":"2019-10-03T14:29:50.032Z","comments":true,"path":"20191002webSpiderPhoto/","link":"","permalink":"/20191002webSpiderPhoto/","excerpt":"","text":"暑假搭建完博客，随即发现奇缺美图，故写下这个简单的图库爬虫 学名为聚集爬虫，目标设置为简单的静态图库和使用了伪静态的动态图库 效果： 1.高速：可以网速拉满高速下载图库的图片 2.稳定：涉及了方方面面的异常处理（真的方方面面！0_0 ）和调用国外高匿名代理池网站（若出现大量异常多为图库封禁国外IP所致，自行修改代码中所写的代理功能即可） 3.去重：采用Hash算法对图片的md5值去重 小技巧： 1.预测图库图片总数，并模拟出全部下载所需数量大小 人工操作：前一步通过抽样得知重复数（一、可调用命令行获取文件名，再将文件名放置Excel比较。 二、或者直接利用md5算法生成文件放置在Excel中），通过标志重捕估算公式预测图片总数；再用简单的概率论知识（球入盒问题）计算全部下载所需下载数量。 import urllib.request import easygui as g import os import socket import time from hashlib import md5 import sys from bs4 import BeautifulSoup import requests import random from requests.packages import urllib3 from test.test_urllib import urlopen from requests.exceptions import ReadTimeout, ConnectionError, RequestException # 随机选UA def ChooseAgent(): agents = [ &quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.310.0 Safari/532.9&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.514.0 Safari/534.7&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/9.0.601.0 Safari/534.14&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/10.0.601.0 Safari/534.14&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.20 (KHTML, like Gecko) Chrome/11.0.672.2 Safari/534.20&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.27 (KHTML, like Gecko) Chrome/12.0.712.0 Safari/534.27&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.24 Safari/535.1&quot;, ] return random.choice(agents) # 爬取IP def get_ip_list(url, headers): web_data = requests.get(url, headers=headers) soup = BeautifulSoup(web_data.text, &#39;lxml&#39;) ips = soup.find_all(&#39;tr&#39;) ip_list = [] for i in range(1, len(ips)): ip_info = ips[i] tds = ip_info.find_all(&#39;td&#39;) ip_list.append(tds[1].text + &#39;:&#39; + tds[2].text) return ip_list # 随机选IP def get_random_ip(ip_list): proxy_list = [] for ip in ip_list: proxy_list.append(&#39;http://&#39; + ip) proxy_ip = random.choice(proxy_list) proxies = {&#39;http&#39;: proxy_ip} return proxies # 图片去重——Hash算法，path和open需对应相应文件位置 def md5(): path = &#39;E:/Images&#39; f = open(&#39;E:/Images/md5.txt&#39;, &#39;w&#39;) list = [] list1 = [] # 得到所有图片的路径，加到列表list1中 root, _, files = next(os.walk(path)) for i in range(len(files)): line = path + &#39;/&#39; + str(files[i]) list1.append(line) # 计算每张图片的md5值，并将图片路径与其md5值整合到列表list中 for n in range(len(list1)): hash = md5() img = open(list1[n], &#39;rb&#39;) hash.update(img.read()) img.close() list2 = [list1[n], hash.hexdigest()] f.write(str(list2) + &#39;\\n&#39;) list.append(list2) # 两两比较md5值，若相同，则删去一张图片 m = 0 while m &lt; len(list): t = m + 1 while t &lt; len(list): if list[m][1] == list[t][1]: os.remove(list[t][0]) del list[t] else: t += 1 m += 1 # 下载图片核心代码 def downloadImages(quantity, nam, address, url): headers = { # &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) &#39; # &#39;Chrome/51.0.2704.63 Safari/537.36 &#39;, &#39;Referer&#39;: url, &#39;Connection&#39;: &#39;keep-alive&#39; } headers[&quot;User-Agent&quot;] = ChooseAgent() IP_url = &#39;http://www.xicidaili.com/nn/&#39; ip_list = get_ip_list(IP_url, headers=headers) timeout = 20 socket.setdefaulttimeout(timeout) # 这里对整个socket层设置超时时间。后续文件中如果再使用到socket，不必再设置 sleep_download_time = 0 for i in range(1, quantity + 1): try: time.sleep(sleep_download_time) # 这里时间自己设定 proxies = get_random_ip(ip_list) urllib3.disable_warnings() response = requests.get(url, headers=headers, proxies=proxies, verify=False) if response.status_code == requests.codes.ok: print(&quot;访问成功&quot;) _image = response.content name = address + &#39;/&#39; + nam + &quot;%s&quot; % i + &#39;.png&#39; with open(name, &#39;wb&#39;) as t: t.write(_image) t.close() response.close() print(proxies, &quot;第%d张打印完毕&quot; % i) except requests.RequestException as e: print(e) except UnicodeDecodeError as e: print(&#39;-----UnicodeDecodeError url:&#39;, url) except urllib.error.URLError as e: print(&quot;-----urlError url:&quot;, url) except socket.timeout as e: print(&quot;-----socket timout:&quot;, url) except ReadTimeout: print(&quot;timeout&quot;) except ConnectionError: print(&quot;connection Error&quot;) except RequestException: print(&quot;error&quot;) if __name__ == &#39;__main__&#39;: sys.setrecursionlimit(100000) # 递归深度设置为十万 fields_list = [&#39;*图片来源网址&#39;, &#39;文件命名&#39;, &#39;下载数量&#39;] values_list = [&#39;&#39;, &#39;images&#39;, &#39;1&#39;] know = g.multenterbox(msg=&#39;带*号的为必填项&#39;, title=&#39;自动下载图片脚本&#39;, fields=fields_list, values=values_list) an = know[0] nam = know[1] num = int(know[2]) address = g.diropenbox(msg=&#39;请选择存储文件夹 &#39;, title=&#39;自动下载图片脚本&#39;) check = an[:4] if check != &#39;http&#39;: ans = &#39;http://&#39; + an else: ans = an downloadImages(num, nam, address, ans) md5() 正在学习爬虫，欢迎致信交流","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Python爬虫","slug":"Python爬虫","permalink":"/tags/Python爬虫/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Git 问题贴","slug":"git","date":"2019-09-25T15:28:03.000Z","updated":"2019-10-02T15:42:17.493Z","comments":true,"path":"20190925git/","link":"","permalink":"/20190925git/","excerpt":"","text":"git clone问题 执行git clone提示“fatal: unable to access目标地址” git clone https://git.tt-rss.org/fox/tt-rss.git tt-rss 解决办法：把https改为git即可","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"【种树系列】中秋特辑之AvlTree","slug":"AvlTree","date":"2019-09-15T16:50:24.000Z","updated":"2019-10-03T15:21:22.215Z","comments":true,"path":"20190916AvlTree/","link":"","permalink":"/20190916AvlTree/","excerpt":"","text":"/* This ADT can carry out major operations of AvlTree if you achieve the rest. */ /* AvlTree was created to keep an ideal balance of tree height. */ /* We all know that AvlTree major contains Single Rotation and Double Rotation. */ #define ElementType int typedef struct AvlNode *Position; typedef struct AvlNode *AvlTree; struct AvlNode{ ElementType Data; AvlTree Left; AvlTree Right; int Height; }; static int Height(Position P){ if(!P) return -1; else return P-&gt;Height; } int Max ( int a, int b ) { return a &gt; b ? a : b; } AvlTree Insert(ElementType X, AvlTree T){ if(!T){ T=malloc(sizeof(struct AvlNode)); if(!T) FatalError(&quot;Out of space!!!&quot;); else{ T-&gt;Data=X; T-&gt;Height=0; T-&gt;Left=T-&gt;Right=NULL; } } else if(X&lt;T-&gt;Data){ T-&gt;Left=Insert(X,T-&gt;Left); if(2 == (Height(T-&gt;Left)-Height(T-&gt;Right))) if(X&lt;T-&gt;Left-&gt;Data) T = SingleRotateWithLeft(T); else T = DoubleRotateWithLeft(T); } else if(X&gt;T-&gt;Data){ T-&gt;Right=Insert(X,T-&gt;Right); if(2 == (Height(T-&gt;Right)-Height(T-&gt;Left))) if(X&gt;T-&gt;Right-&gt;Data) T = SingleRotateWithRight(T); else T = DoubleRotateWithRight(T); } /*Else X is in the tree already; we&#39; ll do nothing*/ // don&#39;t forget to renew Height of AvlTree T-&gt;Height=Max(Height(T-&gt;Left),Height(T-&gt;Right)) + 1 ; return T; } static Position SingleRotateWithLeft(Position B){ Position A; /*ATree are dancing with BTree*/ A = B-&gt;Left; B-&gt;Left = A-&gt;Right; A-&gt;Right = B; B-&gt;Height = Max(Height(B-&gt;Left),Height(B-&gt;Right))+1; A-&gt;Height = Max(Height(A-&gt;Left),Height(A-&gt;Right))+1; return A; /*New root*/ } static Position DoubleRotateWithLeft(Position C){ /*Rotate between A and B */ C-&gt;Left = SingleRotateWithRight(C-&gt;Left); /*Rotate between C and B */ return SingleRotateWithLeft(C); }","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[{"name":"种树系列","slug":"种树系列","permalink":"/tags/种树系列/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}]},{"title":"计算机组成原理学习笔记第二周","slug":"computerorganization2","date":"2019-09-13T14:03:18.000Z","updated":"2019-10-03T13:51:55.692Z","comments":true,"path":"20190913computerorganization2/","link":"","permalink":"/20190913computerorganization2/","excerpt":"","text":"第三章、系统总线3.1、总线的基本概念计算机各部件的互连方式有两种： 分散连接，各部件之间单独连线 总线连接，各部件的线连到一组公共信息传输线上 总线是连接多个部件的信息传输线，是各部件共享的传输介质。 记几个案例（注意特点）：面向CPU的双总线结构、单总线结构。 3.2、总线的分类不同角度的分类数据传送方式：1.并行传输（分宽度）、2.串行传输 （目前最快）适用范围分类：有计算机（包括外设）总线、测控总线、网络通信总线等连接部位分类： 3.2.1、片内总线指芯片内部的总线，如CPU内部（别忘CPU由什么组成的！）、寄存器与寄存器之间、寄存器与算逻单元ALU之间 3.2.2、系统总线指CPU、主存、I/O设备各大部件之间的信息传输线 根据传输信息不同，有三分类： 数据总线，对于CPU而言是双向，用来传输各功能部件之间的数据信息，其位数与机器字长、存储字长有关（因为送进寄存器），数据总线的位数称为数据总线宽度 地址总线，由CPU输出为单向，用来指出数据总线上的源数据或目的数据在主存单元的地址或I/O设备的地址，其地址线的位数与存储单元的个数有关 控制总线，单向（对于控制总线总体又可认为双向），用来发出各种控制信号的传输线，如对CPU而言控制信号既有输出又有输出（但不可为双向传输），请注意控制信号类别！ 3.2.3、通信总线 用于计算机系统之间或计算机系统与其他系统（如控制仪表、移动通信等）之间的通信 根据传输方式可分为两种： 串行通信，1字节数据分8次由低位到高位按顺序逐位传送 并行通信，1字节数据通过8条并行传输线同时有源传送到目的地 3.3、总线特性及性能指标3.3.1、总线特性 物理角度来看，总线由许多导线直接印制在电路板（主板）上，延伸到各部件 机械特性，规格统一，方便安装 电气特性，电平范围，0、1高低 功能特性，线传输功能 时间特性，一根线在何时有效，如时序电路在规定有效时序才有效 3.3.2、总线性能指标1、总线宽度：数据总线的根数 用位表示 2、总线带宽：总线的数据传输速率 ，每秒传输信息的字节数，单位MBps 3、时钟同步/异步：总线上的数据与时钟同步工作的总线称为同步总线 不同步的称为异步总线 4、总线复用：地址线与数据线复用，一根信号线分时传送两种信号 5、信号线数：地址总线、数据总线和控制总线三种总线的总和 6、总线控制方式：突发工作、自动配置、仲裁方式、逻辑方式、技术方式 7、其他指标：负载能力、电源电压（5V还是3.3V）、总线宽度能否拓展 3.3.3、总线标准知道各总线用途 3.4、总线结构分为单总线和多总线结构 3.4.1、单总线结构特点：将CPU、主存、I/O设备（通过I/O接口）都挂在一组总线上，允许I/O设备之间、I/O设备与CPU之间或I/O设备与主存之间直接交换信息。 用途：小型或微型计算机 改进：为克服总线传输能力不高的情况，采用增加总线宽度和提高传输速率来解决 3.4.2、多总线结构特点：将速度较低的I/O设备从单总线上分离出来，形成主存总线与I/O总线分开的结构 用途：大、中型计算机系统 以下列举多个例子P53 双总线结构主存总线和I/O总线通过处理器连接。处理器是具有特殊功能的处理器，由通道对I/O统一管理 三总线结构在三线结构中，任一时刻只能使用一种总线，主存总线与DMA总线不能同时对主存进行存取，I/O总线只有在CPU执行I/O指令时才能用到。DMA总线专连高速I/O设备 三总线结构（二）因为CPU存取速度相当快，主存存取速度慢，故有CPU和Cache局部设备连接。同时添加扩展总线，解决I/O设备拓展问题，但影响了外设速度。 四总线结构增加一条与计算机系统紧密连接的高速总线，而拓展总线连接低速运转设备 3.4.3、总线结构举例从VL-BUS开始以下都是将高速、低速总线分开 传统微型计算机的总线结构 VL-BUS局部总线结构 PCI总线结构 多层PCI总线结构当PCI总线驱动能力不足时，可采用多层结构 ，使用（PCI桥）","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"计组","slug":"计组","permalink":"/tags/计组/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"计算机系统基础学习笔记第一周","slug":"system","date":"2019-09-07T09:14:10.000Z","updated":"2019-09-13T14:33:02.344Z","comments":true,"path":"20190907system/","link":"","permalink":"/20190907system/","excerpt":"","text":"举例略 看了前面的举例，你的感觉是什么呢？ 计算机好像不可靠 . 从机器角度来说，它永远是对的！ 程序执行结果不仅依赖于高级语言语法和语义，还与其他好多 方面有关. 一点不错！理解程序的执行结果要从系统层面考虑！ 本来以为学学编程和计算机基本原理就能当程序员，没想到还 挺复杂的，计算机专业不好学. 学完“计算机系统基础”就会对计算机系统有清晰的认识 ，以后再学其他相关课程就容易多了。 感觉要把很多概念和知识联系起来才能理解程序的执行结果. 你说对了！把许多概念和知识联系起来就是李国杰院士所提出的 “系统思维”。 即：站在“计算机系统”的角度考虑问题！ 系统能力基于“系统思维”• 系统思维– 从计算机系统角度出发分析问题和解决问题– 首先取决于对计算机系统有多了解，“知其然并知其所以然”•高级语言语句都要转换为机器指令才能在计算机上执行•机器指令是一串0/1序列，能被机器直接理解并执行•计算机系统是模运算系统，字长有限，高位被丢弃•运算器不知道参加运算的是带符号数还是无符号数•在计算机世界，x*x可能小于0，(x+y)+z不一定等于x+(y+z)•访问内存需几十到几百个时钟，而访问磁盘要几百万个时钟•进程具有独立的逻辑控制流和独立的地址空间•过程调用使用栈存放参数和局部变量等，递归过程有大量额外指 令，增加时间开销，并可能发生栈溢出•…….只有先理解系统，才能改革系统，并应用好系统! 程序执行结果 不仅取决于 算法、程序编写 而且取决于 语言处理系统 操作系统 ISA 微体系结构 不同计算机课程 处于不同层次 必须将各层次关 联起来解决问题. 目标：使学生清楚理解计算机是如何生成 和运行可执行文件的！重点在高级语言以下各抽象层– C语言程序设计层 •数据的机器级表示、运算 •语句和过程调用的机器级表示 –操作系统、编译和链接的部分内容–指令集体系结构（ISA）和汇编层 •指令系统、机器代码、汇编语言 –微体系结构及硬件层 • CPU的通用结构 •层次结构存储系统 系统基本组成基本原理参见计算机组成原理第一周笔记","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"计算机系统","slug":"计算机系统","permalink":"/tags/计算机系统/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"计算机组成原理学习笔记第一周","slug":"compterorganization","date":"2019-09-06T06:07:10.000Z","updated":"2019-09-13T14:33:39.072Z","comments":true,"path":"20190906compterorganization/","link":"","permalink":"/20190906compterorganization/","excerpt":"","text":"1.1、计算机系统概论1.1.1、计算机的软硬件概念1.计算机：能按照程序运行，自动高速处理海量数据的现代化智能电子设备。 2.系统：由相互作用相互依赖的若干组成部分结合而成的具有特定功能的有机整体，而这个有机整体又是它从属的更大系统的组成部分。 3.计算机系统：用于数据库管理的计算机硬软件及网络系统。 硬件 软件 （数据程序） 系统软件（用来管理整个计算机系统） 标准程序库、语言处理程序、操作系统、服务性程序、数据库管理系统、网络软件。 应用软件（按任务需要编制成的各种程序） 4.软硬件关系 ​ a.硬件系统和软件系统具有功能等价性前者由逻辑门电路实现后者由赋值、比较、循环实现 b.因性价比问题，硬软件折中 1.1.2、计算机系统的层次结构高级语言 M4 虚拟机器 软件汇编语言 M3 虚拟机器 软件操作系统 M2 虚拟机器 软件机器语言 M1 实际机器 硬件微程序系统 M0 微程序机器 硬件 总括：用户用高级语言编写的程序（源程序）和数据一起送入计算机内，再由计算机将其翻译成翻译成机器能识别的机器语言程序（目标程序）。 面向问题的高级语言接近人们的习惯，并且还具有较强的通用性，它被高级语言机器 翻译 成汇编语言程序，用户再利用汇编语言机器 翻译 成机器语言。微程序机器（对实际机器的分解）将每条机器指令翻译成一组微指令，构成微程序。操作系统提供再汇编语言和高级语言的使用和实现过程中的基本操作，还控制管理计算机系统全部硬件和软件资源的作用。 翻译由翻译程序完成，翻译程序有两种，上述为编译程序：源程序全部语句一次全翻译成机器语言程序，紧接着执行。另一种解释程序：源程序一条语句翻译成对应于机器语言的一条语句，并且立即执行这条语句，如此重复直到完成，如Python就是。 “引入CSapp的内容来理解上方枚举的层次结构” 尽管helloworld程序非常简单，但为了让它完成运行，系统的每个主要组成部分都需要协调工作。故我们以C语言程序的例子来横向分析层次结构是如何运行的： hello程序的生命周期从一个hello.c源程序（源文件）开始 hello.c由值0和1组成的位（bit）序列，8个位被组织成一组，称为字节，每个字节表示程序中某个文本字符。大部分现代系统采用ASCII标准来表示每个文本字符 hello.c以字节序列的方式（一串位表示）存储在文件中 tips：像hello.c这样的只由ASCII字符构成的文件称为文本文件，所有其他文件都称为二进制文件。 从源程序文件hello.c至可执行目标文件hello.o，编译 图为编译系统 预处理阶段。预处理器（cpp）根据以字符#开头的命令，修改原始的C程序，得到另一个c程序，通常以 . i 作为文件拓展名。 编译阶段。编译器（ccl）将文本文件hello.i翻译成文本文件hello.s，它包含一个汇编语言程序。该程序每条语句都以一种标准的文本格式确切地描述了一条低级机器语言指令。 汇编阶段。汇编器（as）将hello.s翻译成机器语言指令，并将这些指令打包成可重定位目标程序（relocatable object program）的格式，将结果保存在hello.o二进制的文件中。此时它的字节编码是机器语言指令而不是字符。 链接阶段。标准库函数存在于函数名.o单独预编译好了的目标文件中，如printf.o。链接器（Id）负责将其合并到我们的hello.o程序中。结果得到hello文件，它是个可执行目标文件，可以加载到内存中，由系统执行。 1.1.3、计算机组成和计算机体系结构计算机体系结构：程序员见到的计算机系统属性。包括指令集、数据类型、存储器寻址技术、I/O机理等，多为抽象属性。计算机组成：如何实现计算机体系结构所体现的属性，它包含如何做某事，即如何取指令、分析指令、取操作数、运算、送结果。（可以说比体系结构更加底层） for example： 是否具备乘法指令是结构的问题，其实现用专门的乘法电路还是连加的加法器是组成问题。 1.2、计算机的基本组成1.2.1、冯·诺依曼计算机的特点特点： 计算机由运算器、存储器、控制器、输入设备和输出设备五大部件组成 指令和数据以同等地位存放于存储器内，并可按地址寻访 指令和数据均用二进制数表示 指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数地址位置 指令在存储器内按顺序存放 机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成 tips：因木桶效应，现以存储器为中心 1.2.2、计算机的硬件框图 部件功能： 运算器：完成算术运算和逻辑运算，并将运算的中间结果暂存在运算器内 存储器：存放数据和程序 控制器：控制、指挥程序和数据的输入、运行以及处理计算结果 输入输出设备：人们熟悉的信息形式 $\\iff$ 机器能识别的信息形式 现代计算机以三大部分构成：CPU、I/O设备、主存 1.2.3、计算机的工作步骤一.上机前的准备 建立数学模型 确定计算方法 编制解题程序 操作码表示机器所执行的各种操作，地址码表示参加运算的数在存储器内的位置 二、上机运行 步骤还可参考汇编语言加法的实现 主机：是计算机硬件的主体部分，由CPU和主存储器M构成 CPU：中央处理器，是计算机硬件的核心部件，由运算器和控制器组成 主存：计算机中存放正在运行的程序和数据的存储器，为计算机的主要工作存储器，可随机存储，由各种逻辑部件及控制电路组成 存储单元：可存放一个机器字并具有特定存储地址的存储单位 存储元件：存储一位二进制信息的物理元件，是存储器中最小的存储单位，又叫存储基元，不能单独存取 存储字：一个存储单元所存二进制代码的逻辑单位 存储字长：一个存储单元所存二进制代码的位数 存储容量：存储器可存二进制代码的总量 机器字长：指CPU一次能处理的二进制数据的位数，通常与CPU的寄存器位数有关 指令字长：一条指令的二进制代码位数 1.3、计算机硬件的主要技术指标 时间 1个主频，CPU运算速度 ​ 非时间 2个机器字长，通常与CPU的寄存器位数有关：影响精度、计算次数存储容量，包括主存和辅存，主存容量指主存中存放二进制代码的总位数。MAR的位数代表存储单元个数，MDR的位数反映存储字长，两个的位数相乘等于存储容量","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"计组","slug":"计组","permalink":"/tags/计组/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"B计划Win10设计","slug":"Win10PlanB","date":"2019-08-31T03:35:15.000Z","updated":"2019-09-05T15:58:14.367Z","comments":true,"path":"20190831Win10PlanB/","link":"","permalink":"/20190831Win10PlanB/","excerpt":"","text":"Windows 10 自带微软拼音输入法繁体简体切换快捷键 快捷键是：Ctrl + Shift + F","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"梳理基于Hexo搭建博客的原理","slug":"what-is-Hexo","date":"2019-08-31T03:31:07.000Z","updated":"2019-09-08T14:32:19.990Z","comments":true,"path":"20190831what-is-Hexo/","link":"","permalink":"/20190831what-is-Hexo/","excerpt":"","text":"[TOC] CONTENT 前言 Hexo + github Github Pages Hexo 什么是Hexo 工作原理 模板引擎 数据填充 前言刚开始像所有人一样，我对照着攻略趟过无数坑终于把博客给整出来了。在安装、配置、开发的过程中，免不了阅读官方文档，作为安装小白的我看了几天英文的Docs（突如其来的大量web专业英语词汇真的影响进度），后来才发现有中文版……随着对Hexo理解的加深，渐渐开始对原理好奇起来，我本着知其然知其所以然，搜了许多有关资料，现在对hexo有了些新的认识，就来梳理记录一下。 首先需阐明的是本文用window系统为例，而有相当一部分Hexo是搭建在LNMP或LAMP环境下的，但这一切仅仅是物理存储位置发生了变化，原理依旧不变。 LNMP指的是 linux+nginx+mysql+php，这是一款功能非常强大的环境套件，nginx以其轻量而高效受到建站者的青睐。补一句：apache是全球最受欢迎的web服务器端软件之一，广泛用于企业级建站。 Github PagesHexo搭建的博客项目源码托管在github，并享受github pages服务。 ​ GitHub pages简称pages服务，每个仓库都有一个pages服务，可用来展示项目，通过简单的设置项目的index.html，并以此做为入口供用户参观访问。可是一个相当实用的功能呀！大部分的 pages 服务都是用来搭建个人博客的。言外之意不仅能搭建博客，还能做些其他的事情~ tips：pages设置中的custom domain，如你所见设置可供访问的定制域名 为什么需要Pages技术生成博客的页面有动、静态页面之分 著名的博客 wordpress ，既是动态页面生成的博客，其思路是 php + MySql 。 博客hexo生成的是静态页面，而Github pages 又支持静态页面的解析。因此二者一拍即合能够用来生成 html 拼合成博客。 静态页面意味着评论、分享等功能得依赖于第三方插件，但它所带来的轻量、高效是动态页面所不及的 Hexo从上面我们了解到 Hexo 是用来生成 HTML 的，那么这章我们就主要来讲一下 Hexo 是怎样生成 HTML 的。 什么是Hexo 在官网中Hexo被介绍为快速、简洁且高效的博客框架。 在官方文档中，我们可以找到他的定义：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 工作原理 hexo文件架构： ├── node_modules： #依赖包-安装插件及所需nodejs模块。 ├── public #最终网页信息。即存放被解析markdown、html文件。 ├── scaffolds #模板文件夹。即当您新建文章时，根据 scaffold生成文件。 ├── source #资源文件夹。即存放用户资源。 | └── _posts #博客文章目录。 └── themes #存放主题。Hexo根据主题生成静态页面。 ├── _config.yml #网站的配置信息。标题、网站名称等。 ├── db.json： #source解析所得到的缓存文件。 ├── package.json # 应用程序信息。即配置Hexo运行需要js包。 首先本地文件夹的source就是数据库，以.md（markdown）格式存储文章，theme文件夹是主题文件（决定页面模板）。 我们可以通过部署流程来逐步详尽分析。以下先来了解hexo有哪些部署命令，再分析部署的步骤流程 hexo的命令总览hexo可以粗略分为三个子项目，分别是: hexo-cli hexo (下文中用hexo core来指代) hexo plugins 其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。 请看下图： hexo-cli：hexo命令行，作用是： 1.启动hexo命令进程和参数解析机制。每次我们输入hexo xxx命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)，hexo init命令仅仅在安装时调用 2.实现hexo命令的三个初始参数：init/version/plugins 3.加载hexo核心模块，并初始化 hexo core：hexo核心，作用是： 1.实现hexo的new、generate、publish等功能 hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类:1.扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令)2.扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件 每次部署的流程 hexo g：生成静态文件。将我们的数据和界面模板相结合生成静态文件的过程。Hexo（node.js程序）遍历主题文件中你的source目录（js、css、img等静态资源），建立索引，再根据索引生成由html、js、css、img建立的纯静态文件并放在public文件夹里。public就是你的博客了，而这些恰好能被git pages识别。 hexo d：部署文件。主要是根据在_config.yml中配置的git仓库或者coding的地址，将public文件通过git方式push到上传到github或coding的指定分支，然后在根据pages服务呈现出页面。当然把public文件部署至你的服务器也是OK滴 图为git主要命令 Hexo的模板引擎模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离 1.请看Hexo文件结构，source文件夹与themes文件夹是同级的，进而我们就可以将source文件夹理解为数据库，而主题文件夹相当于界面。hexo g就将我们的数据和界面相结合生成静态文件public 2.Hexo模板引擎默认使用ejs编写（本文以ejs模板举例，其他的有swig、jade）。hexo首先会解析.md文件，然后根据layout变量判断布局类型，再调用相应布局文件，如此这番每一块内容都是独立的，提供代码的复用性。最终生成一个html页面 3.布局模板文件位于layout文件夹下，以下将布局模板简称模板。layout文件结构在不同主题下文件排布不一，但整体框架是一样的，有： 公共模板。里面引入了head、footer等公共组件，在其他模板下会自动引入公共模板 首页模板 文章模板 分类模板 归档模板 …… 每个模板都默认使用`ayout布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。 在我们新建页面或者新建文章的使用可以选定我们使用的模板。hexo new [layout] &lt;title&gt;就会使用对应的模板 4.模板是可以自定义的 数据填充上面解释了界面的原理，此篇将分析数据及数据如何与界面结合。 数据的填充主要是 hexo -g 的时候将数据传递给 ejs 模板，然后再由 ejs 模板填充到 HTML 中。 配置文件中的数据 Hexo 的配置文件 _config.yml 使用 yml语法 。例如博客的名字、副标题等等之类。这些数据项组织在 config 对象中。可以数字、字符串、对象、数组， 配置文件中数据的使用 如果要在模板中使用某个具体的值，比如字符串、数字、逻辑变量或者对象的某个成员，可以在主题的模板文件 ejs中直接使用： {% block title %} {{ page.title }} | {{ config.title }} {% endblock %} Hexo的变量 配置文件的变量 其他常用变量 总结本质而言Hexo是一款静态页面生成工具 基于Hexo搭建的博客原理简单的说，是一个数据和界面的结合体。数据以.md与.html等格式存储于数据库source文件夹中，界面存于themes文件夹中。每次运行hexo g命令，遍历数据建立索引，根据索引把主题界面文件生成至public文件夹中，即html文件。再运行hexo d 将文件托管，由pages服务显示。 参考文献https://www.jianshu.com/p/a938da5ddb5d https://www.zhihu.com/question/51588481 http://coderunthings.com/2017/08/20/howhexoworks/ https://juejin.im/post/598eeaff5188257d592e55bb#heading-0","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"},{"name":"Web","slug":"Web","permalink":"/tags/Web/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"图表工具ECharts","slug":"ECharts","date":"2019-08-26T13:35:30.000Z","updated":"2019-08-27T12:06:33.324Z","comments":true,"path":"20190826ECharts/","link":"","permalink":"/20190826ECharts/","excerpt":"","text":"Demo 前言ECharts，是一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器），底层依赖轻量级的矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。 上面是来自官网的介绍。 特性优势ECharts最强大的是容易上手，只要有一些前端知识就能驾驭； 社区大，样式丰富选择多； 支持中国地图，这点必须点赞； 它以HTML标记语言为载体，还可以在前端层面进行二次开发。 劣势ECharts.js体积较大，一个基础的ECharts.js都要400K左右，相对于D3.js和hightcharts.js来说都是比较大的； 可定制（延展性）差，其留出的端口较少，使用只需配置几项，属于高度封装，一定程度上限制了用户自定义的可能。 开始第一步新建一个html文本&lt; !DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 第二步引入echarts脚本获取首先你需要echarts的脚本，获取推荐三种方法： 官网打包下载https://echarts.baidu.com/download.html GitHub获取https://github.com/apache/incubator-echarts CDN引入https://www.jsdelivr.com/package/npm/echarts?path=dist （下文将介绍JSCDN的引入方法） JS类别： 完全版：echarts/dist/echarts.js，体积最大，包含所有的图表和组件，所包含内容参见：echarts/echarts.all.js。 常用版：echarts/dist/echarts.common.js，体积适中，包含常见的图表和组件，所包含内容参见：echarts/echarts.common.js。 精简版：echarts/dist/echarts.simple.js，体积较小，仅包含最常用的图表和组件，所包含内容参见：echarts/echarts.simple.js。 引入 在引入echarts的脚本，我选择的是完全版 ... &lt;head&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/echarts@4.2.1/dist/echarts.js&quot;&gt;&lt;/script&gt;#引入Echarts完全版 &lt;/head&gt; ... 第三步引入你的图表脚本... &lt;body&gt; &lt;!-- 为ECharts准备一个具备大小（宽高）的容器 --&gt; &lt;div id=&quot;main&quot; style=&quot;width: 700px;height:560px;float:right;&quot; &gt;&lt;/div&gt; &lt;script src=&quot;lib/test.js&quot;&gt;&lt;/script&gt; #引入你的脚本,在head标签之间插入也可,src为相对路径 &lt;/body&gt; ... 在.html文件同目录下新建文件夹lib，在lib中新建test.js文件 将以下代码Ctrl+C Ctrl+V复制粘贴进test.js // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById(&#39;main&#39;)); // 指定图表的配置项和数据 var option = { title: { text: &#39;ECharts 入门示例&#39; }, tooltip: {}, legend: { data:[&#39;销量&#39;] }, xAxis: { data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;] }, yAxis: {}, series: [{ name: &#39;销量&#39;, type: &#39;bar&#39;, data: [5, 20, 36, 10, 10, 20] }] }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); 现在打开你的.html文件吧！ 还能更好吗脚本标签的引入有两种方式： &lt;script src=&quot;路径/脚本文件名.js&quot;&gt;&lt;/script&gt; #src为相对路径（本文实例，推荐使用） 或 &lt;script type=&quot;text/javascript&quot;&gt; //在这里面写你的js代码 &lt;/script&gt; div容器的并列： CSS设定漂浮float:left CSS设定同行display：inline style=“float:left;” （此处推荐） 点此查阅其他图表：社区","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"一年级好玩吗","slug":"intern3","date":"2019-08-20T02:26:06.000Z","updated":"2019-09-07T09:23:20.999Z","comments":true,"path":"20190820intern3/","link":"","permalink":"/20190820intern3/","excerpt":"","text":"-&emsp;&emsp;次日办公室来了个有点可爱的小女孩，我一推开门，赶往熟悉的方向，忽然看到一头发如鸦羽般乌黑的小脑袋，扎着小辫子坐在我办公桌上写她的一年级暑假作业…小辫子怯生生地望着我，她看起来知道我过来的缘由了，却依然无动于衷，直视她良久，终于好吧我认输了。我怀着复杂的心情把边上闲置的办公桌擦了擦，白布一抹过去，暗黑的灰尘纷纷抓住这来自不易甚至是久违了的洁净之物，桌子倒是干净了，白布哼唧唧地照了照镜子——晕过去了。我把东西都安全的放下来的时候，小辫子那毫无威慑力的父亲正在给她安排学习任务，事毕没几分钟小辫子又开始不安分了，瞬间办公室成了学校操场。活像一只看起来不太轻巧的乒乓球咚咚哐哐地跳来跳去。走廊并不大，不一会乒乓球撞见了挡板又弹了回来，正好是指向我的方向。望着乒乓我尽量显得温柔一些于是便轻声叫唤：”小朋友。“，重复两次，只见她没有任何反应。我的声音一下子提高了30个分贝（可能高于60分贝），话音刚落我猛地一抬头环顾四周生怕让所有人都给听见了，索性大家都做着自己手头上的事情，根本没注意到跟工作无关的声音。这回她不再怯生生反而是面露一丝难色，这时我有那么十分之一秒的延迟才挂上了笑容，这个延迟是因为我想起隔壁桌同龄女孩的告诫：“对小孩子笑一笑。”笑一笑，是啊，笑是上帝赋予给人类的无价之物。 卡耐基的《人性的弱点》中：”你希望人们乐于同你相处，那你自己就得要先乐于和对方相处，行胜于言，无需开口，你的笑容就替你说出了：你让我开心，很高兴见到你。”而芭拉拉的《身体语言密码》则进而将微笑细分为5种，来推断笑的真伪，没人喜欢虚伪，假笑是无法骗过任何人的。 我直视着她的乌溜溜的双眸，满心欢喜的跟孩子搭话， ”你是一年级的嘛？“ ”是的。“ ”你是一年级，我是二年级的，你在写数学作业吗？“ 这孩子神情变的真快，这会儿惊讶了起来。她喃喃自语生怕我在骗她：”你是二年级的？”她的眼睛突然放着光，就像一个东张西望的小顽童，左顾右盼地猛然发现一道开着一条缝的门。话匣子就这么打开了。 “我爸爸给我布置了写不完的作业，这么久我只写了两道题。”她手指向办公桌，我迎面站起来，白色的办公桌面上花花绿绿的四五本练习册，我随声应和着。 “我是XX小学的，你是哪个小学的？”她开始自报家门了。 后来我听说我是坐火车到南京上学后，便分享她的经历：“我去学校只要走十分钟的路就行了。” …… 她好像不知道大二可以用二年级来称呼(°ー°〃)，尽管听起来奇奇怪怪的(～￣▽￣)～","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"成长","slug":"成长","permalink":"/tags/成长/"},{"name":"实习","slug":"实习","permalink":"/tags/实习/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"Linux安装到配置","slug":"linux","date":"2019-08-19T15:14:13.000Z","updated":"2019-08-24T07:05:25.438Z","comments":true,"path":"20190819linux/","link":"","permalink":"/20190819linux/","excerpt":"","text":"wget http://soft.vpser.net/lnmp/lnmp1.6.tar.gz -cO lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; ./install.sh lnmp 一段不愿再打第二遍的命令，存在的意义是Linux还真想让我再输入一遍，就放在这儿做前言了。纪念一下懒惰的双手、呆滞的目光，这尴尬不已的青涩岁月 一、装个Linux系统？ 有些东西，你实在绕不开 ——littleGreedy Linux /‘lɪnəks/ 就这么着被我撞见了，现在想想真是莫名奇妙,我干嘛要用到他呢。一个站在windows系统外的巨头，为服务器而生的高级搬砖专家，不仅各大公司在用，大学生也在用，甚至连初中生都在玩，可谓是文体两开花，看来这哥们绕不开，我算是摊上了。初识这哥们人狠图不多（界面非常不友好，看起来就像铺满屏幕的代码雨），跑起来后便一扫我的误解，页面竟然清爽优雅的如高仿苹果一般，当然这是后话了 Linux型号奇多，我个人推荐安装CentOS（本篇post的主角）、ubuntu、deepin 二、装个Linux系统！ 安装VMware（虚拟机软件首选） 下载CentOS 7ios文件并在VMware上安装 （我下的最新CentOS是7.6版本） 设置语言、自动分配磁盘、root&amp;user的账户密码设置 重启，完毕！ 我配置的是1核2个处理器，2G内存，20G存储，GUI界面。 三、基础配置过程 操作 获取root最高级别权限： &amp;su - 用root执行指定命令： &amp;sudo 指定命令 复制粘贴鼠标长按左键选定复制内容，指定位置右键释放粘贴 退出修改文件 按Esc 命令行键入:wq！ 双系统传递文件未完成。。。 联wifi增加DNS1 优化网速（Linux下载速度慢的令人发指，据说是没有在windows 上的p2p、页面渲染等加速）浏览器方法一：ip4优先于ip6(未达到预期效果) 方法二：去掉ip6 镜像装阿里云镜像，提高wget下载速度 四、LNMP环境搭建 我装Linux目的就在此，可供搭建服务器。LAMP可选，LNMP中的N比LAMP的A效率更高且资源占用不大，适合我这种平民配置的分区 下载地址和安装攻略https://github.com/licess/lnmp wget无法解析主机https://blog.csdn.net/logic_c/article/details/82724790 我配的MySql 5.7 ，内存优化选择Jemalloc， PHP7.2，","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"意义之所在","slug":"intern3-0","date":"2019-08-19T08:23:06.000Z","updated":"2019-09-05T16:00:47.380Z","comments":true,"path":"20190819intern3-0/","link":"","permalink":"/20190819intern3-0/","excerpt":"","text":"&emsp;&emsp;终于，从今天起正式上班了！ &emsp;&emsp;又是一个平淡无奇的早上，我走进公交站台，一个小时后到达这趟行程的目的地。 &emsp;&emsp;前脚踏进办公室，后脚主任就交给我一份300多页的word文档、十三多万字，还是受保护视图的格式。我凑近屏幕一看标题，内心大喜，“这是一上来就重用我啊。” 在这种心态的酝酿下，工作的坎坷和预计的收获一瞬间达到了微妙的平衡，很快内心深处的这点小秘密包不住了，欣喜点燃了一座座烽火台，余热让力量如温泉般源源不断的向外溢出，顿时斗志十足。 &emsp;&emsp;Word文档不像某些阅读器有反人类的设定，而是所有细节都为办公而生的！（自动翻页好评:v:）。由于不清楚ddl，又不敢问，我只好用当天把它看完了，不仅是因为工作效率是关键，还是对这份刚刚接触到的工作所拥有的兴趣。 &emsp;&emsp;这技术文档看的还挺吃力，让我小小的加班了20分钟。带着这份热情，我收拾好东西，跟自己部门的同事挨个打了声招呼，再向坐我边上的女生打声招呼，便离开了办公室。悄无声息无影无踪是我上网在职场攻略里看到的贬义词（平时生活也是一样），打招呼是见面和相别最基本的礼节或者说是人之常情，往往不一定得语言表达，肢体动作同样可以，正所谓礼多人不怪，彬彬有礼总会好些。 0CDC9D401C04B30516AAA3CCEAF9528D075D7E19 (724×1024)","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"成长","slug":"成长","permalink":"/tags/成长/"},{"name":"实习","slug":"实习","permalink":"/tags/实习/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"一条命令开QQ对话//内附web端打开本地exe方法","slug":"Tencent","date":"2019-08-18T06:05:06.000Z","updated":"2019-08-25T07:47:57.013Z","comments":true,"path":"20190818Tencent/","link":"","permalink":"/20190818Tencent/","excerpt":"","text":"QQ tencent:// 功能 来源参考 用法：复制任意一行代码进浏览器导航即可。 参数：uin是被操作的一方（你消息发送给的人），fuin指定主动操作的一方（可忽略，因为你的QQ号默认为主动操作的一方） 增加好友 tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=QQ号&amp;website=www.oicqzone.com 打开好友对话窗口 tencent://Message/?Uin=QQ号&amp;websiteName=www.oicqzone.com&amp;Menu=yes tencent://Message/?Menu=YES&amp;Uin=QQ号&amp;websiteName=im.qq.com tencent://message/?Menu=yes&amp;uin=QQ号 tencent://message/?&amp;uin=QQ号 tencent://message/?Menu=yes&amp;uin=QQ号&amp;fuin=QQ_2号 #用于多号登录情况，QQ_2号发送给QQ号信息 hhh，最近又发现了一个法子： http://wpa.qq.com/msgrd?v=3&amp;uin=QQ号&amp;site=qq&amp;menu=yes 我的链接在这里，要来骚扰我嘛？ 临时会话 tencent://Message/?Uin=QQ号&amp;websiteName=qzone.qq.com&amp;Menu=yes CMD打开命令 start tencent://Message/?Uin=QQ号 打开群窗口：(http://qun.qq.com/join.html获取群打开代码) 如：http://shang.qq.com/wpa/qunwpa?idkey=c3a6393707f0ef5c2ec729b8100d2d8f927c8938a4423db86f64a3c02a7ab0b3 Web端启动本地exe此功能可拓展为使用浏览器启动本地.exe应用程序。原本我想实现一个嵌入网页的在线应用程序，鉴于html本身对安全性的要求（直接打开exe就转换成下载命令了），遂退而求其次发现了打开本地应用程序的方法，在此鸣谢uuz大佬的指点。（笑 自定义设置方法：web端调起Windows系统应用程序（exe执行文件），全面兼容所有浏览器 访问格式：xxx://xxx的对应参数 访问QQ实例：tencent:// ​ :point_left:点一下试试吧","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"菜谱系列","slug":"菜谱系列","permalink":"/tags/菜谱系列/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"迷宫题解--栈","slug":"Maze1","date":"2019-08-17T14:35:35.000Z","updated":"2019-08-18T07:23:15.767Z","comments":true,"path":"20190817Maze1/","link":"","permalink":"/20190817Maze1/","excerpt":"","text":"数据结构迷宫问题，2019年蓝桥杯考察题型 #栈的解法 #include&amp;lt;iostream&amp;gt #define row 10 //行 #define col 10 //列 using namespace std; int Maze[row][col] = { {1,1,1,1,1,1,1,1,1,1}, {1,0,0,1,0,0,0,1,0,1}, {1,0,0,1,0,0,0,1,0,1}, {1,0,0,0,0,1,1,0,0,1}, {1,0,1,1,1,0,0,0,0,1}, {1,0,0,0,1,0,0,0,0,1}, {1,0,1,0,0,0,1,0,0,1}, {1,0,1,1,1,0,1,1,0,1}, {1,1,0,0,0,0,0,0,0,1}, {1,1,1,1,1,1,1,1,1,1} };//地图，0是可以走的，1是障碍。 typedef struct { int x; int y; int di; }Box; typedef struct { Box data[row*col]; int top; }StackType; bool Mazepath(int tx,int ty,int fx,int fy){//求解路径为：(tx,ty)-&gt;(fx,fy) StackType S; int x,y,di,find; S.top=-1; //初始化栈 S.top++; //Push操作 S.data[S.top].x=tx; S.data[S.top].y=ty; S.data[S.top].di=-1; Maze[tx][ty]=-1; //标记此处已走 while(S.top&gt;-1){ //取栈顶方块 x=S.data[S.top].x; y=S.data[S.top].y; di=S.data[S.top].di; if(x==fx&amp;&amp;y==fy){ //check on if arrived finishing point cout&lt;&lt;&quot;顺利抵达&quot;&lt;&lt; endl; for(int k=0;k&lt;=S.top;k++){ cout&lt;&lt;&quot; &quot;&lt;&lt;&quot;(&quot;&lt;&lt; S.data[k].x&lt;&lt; &quot;,&quot;&lt;&lt; S.data[k].y&lt;&lt; &quot;)&quot;; if ((k + 1) % 5 == 0) cout&lt;&lt; endl; } cout&lt;&lt; endl; return true; } find=0; //初始化find，find为1则位置可通(只未曾走到过的通道块) while(di&lt;4&amp;&amp;find==0){ //四种方向 di++; switch(di){ case 0: x=S.data[S.top].x-1; y=S.data[S.top].y; break; case 1: x=S.data[S.top].x+1; y=S.data[S.top].y; break; case 2: x=S.data[S.top].x; y=S.data[S.top].y-1; break; case 3: x=S.data[S.top].x; y=S.data[S.top].y+1; break; } if(Maze[x][y]==0) find =1; //位置可通 } if(find==1){ //位置可通 S.data[S.top].di=di; //此时di为4 S.top++; //选择下个可走的方块进栈（Push操作） S.data[S.top].x=x; S.data[S.top].y=y; S.data[S.top].di=-1; Maze[x][y]=-1; //标记去重复 } else //无路可走则退栈 { Maze[S.data[S.top].x][S.data[S.top].y]=0;//复原为可走位置 S.top--; } } return false; } int main() { if(!Mazepath(1,1,8,8)) cout&lt;&lt;&quot;无解&quot;; return 0; } SimpleInput： 迷宫图、起点和终点坐标 SimpleOutput： 路径坐标","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[],"keywords":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}]},{"title":"GIFT_summer","slug":"giftsummer","date":"2019-08-15T14:17:47.000Z","updated":"2019-08-17T14:34:06.642Z","comments":true,"path":"20190815giftsummer/","link":"","permalink":"/20190815giftsummer/","excerpt":"","text":"一份来自夏季的礼物，据说下面这些资源是撩汉撩萌妹，发消息写文章，居家旅行、之不可多得的必备操作~ Emoji参考代码 :star2:Emoji cheat sheet!!!合集强势来袭， 可用于Markdown、GitHub、YouTube、Dokuwiki等等 萌出血的撩汉撩萌妹的必备软萌颜文字生成工具 OJI 画面太美，过于可爱(&gt;▽&lt;) 超级无敌乃至全幼儿园最萌的颜文字字库 链接1 种类丰富 链接2 无需翻页 一张图片得选10分钟的我，选这张图的理由是和标题搭到不行~ &lt;(￣︶￣)&gt;","categories":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"/categories/资源/"}]},{"title":"身影和夏天","slug":"intern2","date":"2019-08-15T13:51:42.000Z","updated":"2019-08-31T02:57:53.784Z","comments":true,"path":"20190815intern2/","link":"","permalink":"/20190815intern2/","excerpt":"","text":"&emsp;&emsp;开门和关门堪称一门艺术。开门时你必须得调整好手放置在门把手上的力度，尽可能减少门的晃动，以免弄出门与门框相碰等不必要的声音。为了让一切都变得容易起来，请将搭在门把手的手腕轻轻地往身体内侧回拉，这样不仅恰好能匀速拉动大门，还能接近无声地确认门是否上锁能否直接拉开。在这一切进行的过程中，挑一个站姿，选一个适当的表情，会令你自我感觉良好。我向来对关门的姿势是拿捏不准的。跳水运动员能在跳板和水面之间,描绘出从容的曲线，评委不仅要看空中的舞姿，还得依据入水溅起的水花来打分。这和关门十分相像，这一系列操作中关键的评分项就是能否做到静音合上门！可惜，大多数时候我只能做到振动~ -&emsp;&emsp;和主任一道走进办公室，在办公室一角跟两个同事的聊了会天，主任搞了个小小的仪式，就像很多影视剧里面的一样，老大带着新人，当场说一段介绍的话，同在一角的两个同事热情的鼓起了掌表示欢迎，同样的，我做了个尊敬、表示感谢的动作回应他们。暖空气遇冷，办公室另一边的三个人对这边发生的事情似乎不闻不问，只有个跟我同龄的女生向我投来好奇的目光，其他两个依旧埋头做着什么（后来我才知道，他们是其它部门的…）。人是进来了，但跟坐办公桌的大家比起来还是少了点什么，主任很快的便分配给我一张在女生旁边的办公桌，是按照年龄分桌的啊（笑），这时应该清理新桌子了，刚才进门时看到的水池、进门捕捉到的放在办公室墙根的扫把、主任给我的毛巾连成了一条完整的流水线。末了，“既然是实习，待半天就行了，中午回去吃饭吧。”主任说道。我掂量了一下话的分量，”秉持积极一点总没坏处“的中心思想，随即播了一句不轻不重地话回复试探了一下意思。确认完我松了口气，干脆地外加极其肯定的语气回了一句：“嗯好，谢谢主任。” -&emsp;&emsp;我走在有一段没一段的林荫路上，正走向不到300米的公交站台，太阳挂在被烤的惨白的天边，天地间弥漫开着无形的蒸汽，这夏日地地道道的与《草房子》里的没有区别，太阳如金色的轮子，轰隆隆滚动过来，直滚到人们头顶的正上方，天地间就仿佛变得火光闪闪了，路边的嫩草叶晒成了卷，一切植物都抵抗不住这热浪的侵袭，而昏昏欲睡地低下了头。大路上，偶尔有人走过，都是匆匆的样子，仿佛被阳光晒久了，就会被烧着似的，刚走出26度空调房的我下班了。","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"成长","slug":"成长","permalink":"/tags/成长/"},{"name":"实习","slug":"实习","permalink":"/tags/实习/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"链表——多项式加法","slug":"linkedList","date":"2019-08-14T14:25:59.000Z","updated":"2019-08-14T16:44:41.386Z","comments":true,"path":"20190814linkedList/","link":"","permalink":"/20190814linkedList/","excerpt":"","text":"# 链表——多项式加法 #include &amp;lt;iostream&amp;gt; using namespace std; struct PolyNode { int coef; int expon; struct PolyNode* link; }; typedef struct PolyNode* Polynomial; void Attach(int coef, int expon, Polynomial* pRear) { Polynomial P; P = (Polynomial)malloc(sizeof(struct PolyNode)); P-&gt;coef = coef; P-&gt;expon = expon; P-&gt;link = NULL; (*pRear)-&gt;link = P; *pRear = P; } int Compare(int expon1, int expon2) { if (expon1 == expon2) return 0; else if (expon1 &gt; expon2) return 1; else return -1; } Polynomial AddPoly(Polynomial P1, Polynomial P2) { Polynomial front, rear, temp; int sum; //无需初始化 rear = (Polynomial)malloc(sizeof(struct PolyNode)); //rear-&gt;link=NULL; 需要加，因为Attach()会改变rear-&gt;link front = rear; while (P1 &amp;&amp; P2) { switch (Compare(P1-&gt;expon, P2-&gt;expon)) { case 0: //指数相等 sum = P1-&gt;coef + P2-&gt;coef; if (sum) { Attach(sum, P1-&gt;expon, &amp;rear); P1 = P1-&gt;link; P2 = P2-&gt;link; } else { P1 = P1-&gt;link; P2 = P2-&gt;link; } break; //别忘了 case 1: Attach(P1-&gt;coef, P1-&gt;expon, &amp;rear); P1 = P1-&gt;link; break; case -1: Attach(P2-&gt;coef, P2-&gt;expon, &amp;rear); P2 = P2-&gt;link; break; } } for (; P1; P1 = P1-&gt;link) Attach(P1-&gt;coef, P1-&gt;expon, &amp;rear); for (; P2; P2 = P2-&gt;link) Attach(P2-&gt;coef, P2-&gt;expon, &amp;rear); rear-&gt;link = NULL; //三行代码free头节点 temp = front; front = front-&gt;link; free(temp); return front; //别忘了 } Polynomial ReadPoly() { //读入多项式 Polynomial front, rear, temp; int n, coef, expon; rear = (Polynomial)malloc(sizeof(struct PolyNode)); rear-&gt;link = NULL; front = rear; cin &gt;&gt; n; while (n--) { cin &gt;&gt; coef &gt;&gt; expon; Attach(coef, expon, &amp;rear); } temp = front; front = front-&gt;link; free(temp); return front; } void PrintPoly(Polynomial P) { int flag = 0; //调整输出格式 if (!P) { cout &lt;&lt; 0 &lt;&lt; &quot; &quot; &lt;&lt; 0; return; } while (P) { if (!flag) flag = 1; else cout &lt;&lt; &quot; &quot;; cout &lt;&lt; P-&gt;coef &lt;&lt; &quot; &quot; &lt;&lt; P-&gt;expon; P = P-&gt;link; } } int main() { Polynomial P1, P2; P1 = ReadPoly(); P2 = ReadPoly(); PrintPoly(AddPoly(P1, P2)); return 0; } 输入样例 4 3 4 -5 2 6 1 -2 03 5 20 -7 4 3 1输出样例 笔记1.计数器：什么时候把n– P=P-&gt;link等操作写入while()? 在函数作用域内不对当前值进行操作时。 2.生成新节点,必P-&gt;Link=NULL; 3.链表插入思路：生成新节点，让rear连结新节点","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"/tags/笔记/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}]},{"title":"风起雨时","slug":"intern","date":"2019-08-13T07:51:23.000Z","updated":"2019-08-20T16:47:08.261Z","comments":true,"path":"20190813intern/","link":"","permalink":"/20190813intern/","excerpt":"","text":"决定去大公司锻炼锻炼 幸运的是这件事很快有了着落 离开总经理办公室，脑海里反复浮现着一分钟前的场景，“实习的你现在还做不了什么，一定要要多看、多听，多思考，让自己多去学习”，佩戴党徽的总经理透过鼻梁上的两片凹透镜直视着我，那时起我便暗暗下定决心记住这句珍贵的忠告 我一路随主任到我们的办公室去，它就在不远的另一栋建筑里。楼道里只有规律到瘆人的脚步声，气氛莫名有一丝尴尬。“主任，你部门一般是做什么的？”一个不轻不重的问句，我率先开始破冰了。话音刚落，主任积极地给予我颇具信息量的反馈，字里行间不难听出话者时隐时现的精明。路有点长，我们的对话在出楼梯间前就结束了。无声也是一种陪伴，即使才认识10分钟，我想 很快我们就到了，办公室的门上插着一把钥匙，我对在门背后的实习生活充满了期待","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"成长","slug":"成长","permalink":"/tags/成长/"},{"name":"实习","slug":"实习","permalink":"/tags/实习/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"图床DIY","slug":"CDNasFood","date":"2019-08-12T15:32:00.000Z","updated":"2019-08-24T07:36:00.379Z","comments":true,"path":"20190812CDNasFood/","link":"","permalink":"/20190812CDNasFood/","excerpt":"","text":"其实我们每一个人都多多少少用过类似图床的东西~ 本地相册 相信大家都不陌生吧~ 但是更换电脑、手机后我们就查看不到了~ 我们更希望能方便地快速地看到它，不仅是方便了自己，还可以是分享给他人 因为这样我们就能在任何设备上浏览它、备份它也可以将其分享在社交平台上~ 我们身边的QQ、Wechat和微博就可以做类似的事情 但你大可不必认为它们就是你的图床 因为不够格 更因为我懒，好吧，那样访问太麻烦了~ 一、关于图床图床究竟是个啥？一般是指储存图片的服务器。 许多大厂都提供免费的存储空间，七牛云的图床速度不错，但每隔30天就得换图床的链接就很烦；SM·MS也弱了很多，晚上有时候加载不出来；新浪据说加了防盗链，图床的功能已经挂掉了；综合而言在这里我们便选用github做图床 它可以干什么？效果是通过链接即可快速访问图片 简单吗？（重点）十分简单方便 ，用github作自己的图床，利用picgo上传图片至你自己的github仓库，再使用cdn加速访问。 Github容量大，稳定。且自从被微软收购后，做图床存资源不再算滥用，现在非常值得信赖了，唯一的小缺点就是站点在国外，国内访问速度一般。 二、食用指北准备工作传图工具： PicGo Download 如何食用？ Get三步走~ 获取你的Token 先在github中新建一个存图用的仓库：所有者你自己，名称任意，其他如图配置。 一些颇具影响力的库名字大都简洁好记，也许你也可以取一个~ 注：private模式 将无法生成外链形式！！ 打开github账户/Settings，打开左手边profile中最后一个设置项Developer settings 再点击Personal access token，点击右上角的Generate new token 随意填写Token description，之后一定得把repo全勾！配置完毕后点击确定 记住你的token码，只能看一次而且以后可能要用的，建议复制下来保存。 配置PicGo打开PicGo图床设置 在第一栏填入你的github名称/repo名称 在第二栏填入你的分支名称，默认为master 在第三栏填入你刚才申请到的Token；第四栏填入你的repo中的储存路径 最后点击确认，再点击设为默认图床 CDN加速访问酱紫生成的外链，生成的请求必须通过一层层接力才能传输到服务器，主服务器响应后才能进行下一步，结果呈现在网页上就是一张小图半天加载不出来，非常影响体验，更与我们的宗旨格格不入。可以说CDN的出现一改这番局面，能够达到瞬间加载~~ CDN全称Content Delivery Network，即内容分发网络，是一种新型内容存储和分发技术。它将在缓存、调度、协议三方面进行优化，通过在网络上放置大量节点服务器，借以将用户的请求导向整个CDN网络中的最佳节点，最佳节点的判断并不仅仅依据用户的就近性，还包括服务器当前的负载。 这样的架构使得CDN服务提供商能够代表他们客户，即内容供应商，向最终用户提供尽可能好的体验。 就像一点点开了许多家分店，现在能就近购买了 使用方法我选取的是免费的Jsdelivr，因其可靠性与加速性能，堪称国内CDN大热门，同时也是搭建博客必备。 访问格式：:https://cdn.jsdelivr.net/gh/用户名/库名/路径 访问样例：https://cdn.jsdelivr.net/gh/littlegreedy/zero/images/CLANNAD.png 注意访问样例和图中链接的格式，你一定知道怎么如法炮制了吧~ 你现在就可以制作自己的极速外链了~ 三、餐后小甜点其他图床：https://www.jianshu.com/p/9ca58d56a12a Jsdelivr还提供jquery、wordpress加速服务 请戳","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"菜谱系列","slug":"菜谱系列","permalink":"/tags/菜谱系列/"},{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"【数论】筛法求素数","slug":"isprime","date":"2019-08-12T12:06:10.000Z","updated":"2019-09-05T16:15:52.677Z","comments":true,"path":"20190812isprime/","link":"","permalink":"/20190812isprime/","excerpt":"","text":"用于需要求某个数是不是素数素数的定义：当一个整数仅能被1整除时，这个数为素数 筛法的原理：利用定义算法——如果可以被除1及素数本身的其他数整除，则这个数不是素数。那么就去除要求范围内所有合数、0和1，剩下的就是素数了！ （遍历原则：合数都是素数的倍数）普通的线性筛法：#include&lt;bits/stdc++.h&gt; using namespace std; #define ll long long const int Max = 100000; //最大范围[2,Max) ll su[Max], cnt; bool isprime[Max]; //isprime[i]的0默认为素数，1为非素数 void prime(){ cnt = 1; //memset(isprime,1,sizeof isprime); //初始化列表的函数，此处为错误使用，因只能赋值为0，-1 isprime[0]=isprime[1]= 1; // 0和1不是素数 for(ll i=2 ;i &lt; Max;i++){ //注意非=，防数组溢出 if(!isprime[i]){ //是素数则保存 su[cnt++]= i; for(ll j = i*2; j&lt;=Max ; j += i){// 素数的倍数都为合数 isprime[j]=1; } } } } int main() { prime(); for(ll i=1;i&lt;cnt;i++){ cout&lt;&lt;su[i]; } return 0; } 虽然这极大的减小了判断时间，但依然有些重复计算。比如判断2的时候，2*3；判断3的时候，3*2 重复筛了一遍6 你们一定想到了，上面的说是普通，那么一定还有优化版 筛选小于等于素数i与i的乘积，便可尽量减少重复的筛选，也不会有遗落 优化后的线性筛法：#include&lt;bits/stdC++.h&gt; using namespace std; #define ll long long const int Max = 10000; //最大范围[2,Max) ll su[Max],cnt; bool isprime[Max]; void prime(){ cnt =1 ; isprime[0]=isprime[1]=1; for(ll i=2; i &lt;Max ; i++){//注意非=，防数组溢出 if(!isprime[i]){ su[cnt++]=i; } for(ll j=1; j&lt;cnt &amp;&amp; su[j]*i&lt;Max ; j++){ //遍历当前su数组 isprime[su[j]*i]=1; //标记为非素数 } } } int main() { prime(); for(ll i=1;i&lt; cnt; i++){ cout&lt;&lt;su[i]&lt;&lt;endl; } return 0; } 防止数组溢出全文完— 你以为这就结束了？ 还能更好（调整次序，使其只被删除一次）https://blog.csdn.net/qq_41785863/article/details/80632207《C语言名题精选百则（技巧篇）》，冼镜光 编著，机械工业出版社，2005年7月第一版列举 放在后面据说第二种方法用时是第一种的八分之一，自己动手丰衣足食，试试看把 //测试程序速度 #include&lt;iostream&gt; #include&lt;ctime&gt; using namespace std; int main() { clock_t start,finish; start=clock(); //输入你要测试的程序 finish=clock(); cout &lt;&lt; finish-start &lt;&lt; &quot;/&quot; &lt;&lt; CLOCKS_PER_SEC &lt;&lt; &quot; (s) &quot;&lt;&lt; endl; return 0; } //什么？速度显示为0？ 你为什么不扩大数据规模呢！？ 就像测一页纸的厚度","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[],"keywords":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}]},{"title":"Hexo Icarus主题配置完全手册","slug":"HexoIc","date":"2019-08-11T13:05:30.000Z","updated":"2019-08-24T13:44:27.244Z","comments":true,"path":"20190811HexoIc/","link":"","permalink":"/20190811HexoIc/","excerpt":"","text":"前言Icarus /ˈɪˌkɜrəs/，出自希腊神话，他的发音可谓是清新俊逸格外好听。 这主题让我爱不释手，我花费了许多心血，踩尽了无数坑，折腾地心甘情愿。 本文内容为hexo—Icarus总记录文案，根据我自己的配置日记改编，马马虎虎称得上是大集合攻略了，简称集成攻略︿(￣︶￣)︿ 。由于Icarus和主流的NextT、yilia配置文件书写方式有些格格不入，导致网上大部分攻略的操作都很难照搬进Icarus中，太多东西需要自己摸索，故特写此篇希望能提供给icarus使用者一些小小的搭建经验和思路。 重要定义1）站点配置文件指Hexo根目录下的_config.yml 2）主题配置文件指icarus目录下的_config.yml 准备工作 Icarus Download （官方原版）Cute Icarus Download（民间自改版作品）将下载的icarus文件放入Hexo/themes路径下，记得把站点配置文件_config.yml的themes选项设为Icarus！ Hexo官方doc Icarus官方doc（基础功能实现和已整合插件使用说明书）配置必不可少的资料，虽然部分功能实现表述的很简略，但多阅读它没有什么坏处，也许你会从中发现让你眼前一亮的彩蛋。 主题文件结构（请好好利用这张地图） /includes /languages #用来配置国际化语言版本，里边包含各种个配置像的文本翻译。 /layout #以ejs文件来定义各种含有配置信息调用的布局（绝大多数修改点的位置） /scripts #一些JS脚本 /source /css #用来修改自定义样式，需要掌握一定的css语法。 /fonts #定义字体文件，可以修改博客字体 /images #本地调用的图片放这里 /js #一些js脚本（特效.js存放处） /404.html #自定义的公益404页面 /_config.yml #YML数据串行化格式语言书写的配置文件（首先修改） &nbsp; 开始施工 0. 从零开始： 基础内容先放我自己用的攻略给大家配置，最后放一些我收藏的进阶内容。 （带 * 为初级版本，可升级） 表格列出/路径均为相对路径对应绝对路径为 ~/hexo/themes/icarus/ e.g. /_config.yml 为 ~/hexo/themes/icarus/_config.yml &nbsp;&nbsp; 1. 基本功能实现： 攻略位置：https://blog.csdn.net/marvine/article/details/89816846 2.进阶功能实现： 攻略位置：https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF0000___font_289 3.查漏补缺 下面攻略非常全面。 注意该攻略面向NextT主题，由于文件排布不一，部分资料很难直接套用，故上面给出专属Icarus的解决方案！ 攻略位置：https://www.jianshu.com/p/efbeddc5eb19包含内容：有站点配置文件的修改，添加分类和标签、RSS、文章版权，文章阅读数统计，fork me on GitHub，markdown语法的使用贴士与自定义。 正文开始 从前面的配置开始一路走来，想必你一定收获了很多体验，那么我们接下来去进行美化升级吧！ 1. 如何优雅地捕捉萌妹子（会说话，可换装）参考资料： live2d-widget （最简单最快捷的配置方法） live2d （最优方法，根据博文内容配置，装完就能自定义，推荐） UpUpUp！补充资料：萌妹纸增加陪聊功能 最快用法（三行代码按需插入完美运行）：使用：live2d-widget 首先安装依赖 &lt; script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;&gt; 将上面两行代码插入layout目录下layout.ejs文件的\\&lt; head&gt;和\\&lt;/ head&gt;标签内 最后调用 &lt; script src=&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt; 将上面一行代码插入layout目录下layout.ejs文件的\\&lt; head&gt;和\\&lt;/ head&gt;标签内或者\\&lt; body&gt;和\\&lt;/ body&gt;标签内 CDN用法（可自定义的萌妹纸）：使用：live2d-widget 原理：萌妹的实现代码可通过该链接进行访问。https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js 如果要自定义有关内容，可以把这个仓库Fork一份，然后进行修改。这时，使用方法对应地变为 &lt; script src=&quot;https://cdn.jsdelivr.net/gh/username/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt; 将username替换为你的GitHub用户名即可。 酱纸就能通过jsdelivr访问存于你自己的仓库的萌妹纸代码，先clone到本地修改后再上传。 当然如果模型在手想怎么改怎么改，你懂的。 Self-Host Usage：使用live2d 最优方法，根据博文内容配置，装完就能自定义，无需git上传，hexo自动部署，推荐。 2. 评论系统hexo是静态网页博客，评论系统得借助第三方插件来完成。 综合比较各大评论插件，鉴于界面美观和方便与否，我选择了Valine 官方安装方法，浏览入口找到Valine comment plugin即可https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Plugins/Comment/ 安装分三步，第一注册LeanCloud（推荐国际服 免身份验证），第二步将Valine提供的官方代码插入指定位置，第三参照官方安装方法配置主题_config.yml文件。 3.访客小地球和图表装点你的博客吧~ 点击装配revolvermaps 把html代码插入layout文件下的layout.ejs或者common/footer.ejs中就可以了~ 4.下出电脑屏幕的大雪~这可比上面地不断随机刷新雪花图片的效果要up的多！ 攻略链接：3D落雪 5.Tidio有了之前积累的经验想必不用我过多赘述你也知道该如何使用外链了吧~ 去官网试一试吧！ 6.非常美观的分享按钮超萌图标注册即送，赶快抱回家吧~ hotjar官网 放在后面的话因为版面有限，关于Icarus文字排版，页面排版以及授人以渔的方法只得安排到下期发布了~感谢Hexo社区的各位。 本文完~ 参考：https://blog.csdn.net/qq_29329775/article/details/51019301参考：https://io-oi.me/tech/hexo-next-optimization.html#重要的定义来源：https://blog.csdn.net/marvine/article/details/89816846来源：https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF0000___font_289来源：https://www.jianshu.com/p/efbeddc5eb19来源：https://leflacon.github.io/9a99eb64/来源：https://haremu.com/p/205","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"欧几里德算法（最大公约数算法）","slug":"gcd","date":"2019-08-11T09:38:17.000Z","updated":"2019-09-15T16:53:26.330Z","comments":true,"path":"20190811gcd/","link":"","permalink":"/20190811gcd/","excerpt":"","text":"欧几里德算法的核心是辗转相除法：gcd(a,b)=gcd(b,a mod b) 证明： 设c为a和b的最大公约数，数学表示gcd=(a,b)；因为任意两整数间必存在最大公约数，也就是说存在k1，k2，有a = k1*c, b=k2*c 。 a mod b ，余数r和k3有等价于 r = a - b*k3 = (k1 - k2*k3)c 显然，a和b的余数为最大公约数的倍数 当 余数r为 0时，则输出gcd的左值（b） C语言： //功能：利用欧几里德算法，求整数a，b的最大公约数 //参数：整数a，b //返回：a,b的最大公约数 1. int gcd(int a,int b){ while(a%b){//如果余数不为0，就一直进行辗转相除 int r = a % b;//r为a和b的余数，即r = a mod(b); a = b; b = r; } return b; } 更简洁的形式： 2. int gcd(int a,int b)///位运算 { while(b^=a^=b^=a%=b); return a; } 3. int gcd(int a,int b)///递归调用 { if(b==0) { return a; } gcd(b,a%b); } 4. #include&lt;algorithm&gt;///直接使用c++的内置函数 using namespace std; __gcd(int a,int b)","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[],"keywords":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}]},{"title":"Hexo运营前记","slug":"journeyLikelife","date":"2019-08-10T15:37:30.000Z","updated":"2019-08-14T11:40:10.796Z","comments":true,"path":"20190810journeyLikelife/","link":"","permalink":"/20190810journeyLikelife/","excerpt":"","text":"Hexo是我在七月下旬无意之中得知的一个名词，具体在哪看来的已经无从知晓了，总之它给人一种趣味十足的赶脚。讽刺的是写下这段话的时候，正是我才刚刚理解 做博客就像打游戏，当你以为自己升到80级时，对于别人来说这仅仅处于20级的位置，层次浅到非常。 说白了得折腾 博客前前后后开发足足用时10天之久，每日由早做到深夜，周期之长让我自己都拉下了嘴巴 Σ( ￣д￣；) ！！！，毕竟之前计划用时7天（理论来说该天数绰绰有余），多出来3天感觉做了无用功，超时的让自己心塞(; ´_ゝ`) 。 究其缘由：主要是因为博客更换了三套主题，Yilia、Icarus、Sakura。对，十天内整整三套主题，说出来连我自己都怕了，配置的太纠结太繁琐了！ 最早我抱着官方文档和搭建攻略，攻略里主题的配置用yilia，这款主题主打简洁大方，页面清爽的就像女孩子的脸庞一样。我花了两三天一边熟悉hexo的配置思路方法一边搭建我的小博客，于是乎在我脑海里这场轰轰烈烈的action就此拉开帷幕(●’◡’●)ﾉ。随着开发进程的完善，事情在向着与我预期不太一样的方向飞速发展，简洁的以至于失去个性化炫酷效果的展示空间（至少在我看到旋转切换模块前是这么认为），所以大部分跟我一样的小白选择了另一个方向，通向NextT主题的光辉大道:tada:！简洁、炫酷，你想要的他似乎都有:clap:！一搜攻略铺天盖地的NextT，或许普及度已经超过百分之60？！ 可是，我总觉得它少了点什么。一个契机让我触摸到改变的方向——icarus，大气、别具一格、剔除掉yilia多文章难以管理的弊端、最重要的是看起来十二分清爽，还很炫酷，这些对我而言简直完美无瑕:100:。于是在配置yilia的过程中我star了icarus主题。记得那时我给《Clannad》写下很多话，称其仿佛是一段漫长的旅行，抵达终点的人们心怀暖殇。回到hexo，由于icarus独特的Layout文件布局，完全有异于yilia和NextT，再加上网上的配置攻略少之又少，给一直以来按图索骥的我造成了不小的阻力，是时候充分发挥想象力了:dog:。 为了达成开发目标:cyclone:，我整篇整篇的阅读hexo和icarus的官方文档，然后用三种该死的计算机语言增减代码，还有个没有注释功能的奇葩语言，你敢信？（已证明为乌龙） 雪本来下的就大，很快霜也到了，网上奇缺有关语言的语法资料，令我只能参照着别人的源代码进行施工，这一过程痛苦的令人发指◡ヽ(`Д´)ﾉ ┻━┻。当时，没有任何Web前端经验的我来说，花费连续好几小时破解一段代码的奥义，就像破解了密阿玛斯的宝藏一样有成就感，或是感觉自己瞬间阿兰·图灵转世。写代码也是如此，可能是拜我们的计算机教育所赐，我们被摁着头学了半年多枯燥的语法，便坚定地认为写代码是一件苦差事。世上存在那种哪怕没有任何甜头、甚至只有苦头也要坚持做一件事的人，但这样的人应该还是少数。多数人的坚持，证明应该还是有甜头存在的。现在请记住“甜头”这个词。 世界上任何东西都不是完美无缺的，icarus也不例外，尤其是在查找资料时”被迫欣赏“许多大佬博客的我来说，这回我又明白辽，icarus也许并不是最佳选择。此话怎讲？开发着折腾着，我渐渐发现了个非常致命的问题——无多级导航（仅仅是个人喜好），这点在很多资料和官方文档都有提过，官方文档甚至还给这段描述标红，然而当时并未在意。至此换掉icarus的念头一天大过一天，却始终难以忍痛割爱。 这天晚上我发现了:cherry_blossom:Sakura主题，看起来就是我想要的，当天一咬牙一跺脚开始装配更换！要知道装配伴随着一定的风险，尤其是用:cherry_blossom:Sakura替换掉已经把配置进度条拉满的icarus，一旦原配与后来者产生无法预知的报错，那结果绝对是灾难性的，因为据我所知用icarus的人挺少的（在国内），而用:cherry_blossom:Sakura则少之又少，从i—&gt;S更换概率直接就少的平方除以二，可以说是忽略不计了:new_moon_with_face:，那么网上很难有有纠错攻略:skull:！半个小时后，怀着可能失去hexo的不安，指尖沉重地敲下几行命令，dos命令行滋溜一下~挑出无数行代码，快的令肉眼难以捕捉，鼠标轻拉垂直滚动条，紧贴着墨色的最后几行英文字符发现了我，可惜我抢先一步最小化窗口，因为我知道母子平安:herb:，没有报（抱）错(ﾉ≧∀≦)ﾉ。所以一切都成了理所应当，走过前两个主题的配置流程，这时开发速度和顺利程度前所未有（虽然此时实现一项功能还得1-5个小时）。”太累人了！“，我望着屏幕略微后倾的黑框笔记本电脑大声呐喊，不过只是在心里说，除我自己以外没有人能听见。 既然如此那么为什么要折腾呢？ 百度告诉我们折腾最基础最底层的意义为对事物进行翻来覆去、反复的做和折磨的一种动作形态。 任何事物都不是一成不变的，有太多太多正在改变的东西，鲤鱼跃龙门、滴水石穿、化茧成蝶，然而这些不是一朝一夕就能被改变的，而是漫长而痛苦的。折腾被赋予了一个新的含义——走出舒适区。诚然，走出舒适区现在已然成许多人的口号，嘴上说说而已的口号，智商常常不在线的我更是如此。 很多时候根本不知道自己真正应该做什么。 不过现在回头看来，这条漫长的坡路的起点似乎还不错 :-) A journey like life, welcome to my entire world! 2019.8.10写 2019.8.14改","categories":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"},{"name":"成长","slug":"成长","permalink":"/tags/成长/"}],"keywords":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}]},{"title":"Clannad","slug":"2019-08-02-cl","date":"2019-08-02T15:37:30.000Z","updated":"2019-10-02T15:55:20.099Z","comments":true,"path":"201908022019-08-02-cl/","link":"","permalink":"/201908022019-08-02-cl/","excerpt":"一个讲述亲情、爱情、友情的温馨故事。","text":"一个讲述亲情、爱情、友情的温馨故事。 ​​​ ​ 你知道人们为什么会蜂蛹着上剧院、上电影院吗？ ​ 因为在那里他们可以看到自己人类毫无拘谨的表演，在那里可以看到人们坦白地展露真情。 ——戴尔·卡耐基 ​ 译作经典，读作人生 ​ &emsp;&emsp;冈崎朋也因家庭因素成为不良少年，一直与春原阳平为伍，在光坂高校过着潦倒的生活，但希望终有一天能够离开所在的小镇。某一天，他在学校坡道前发现了一个止步不前的女孩，在朋也认识了这个名为“古河渚”的女孩后，他的生活开始有了重大的变化。 ​ &emsp;&emsp;她冰冷的双眸，眼中灰暗无彩的一切，犹豫不定怯懦不已的内心，在落英缤纷的坡道上止步不前。 “不管有多么开心快乐，所有，所有的一切都在不断改变着，即便如此，你还会喜欢这里吗” 陌生女孩自言自语的问句大概是对自己心中的某个人说得吧。 “只要找到不就好了” 耳畔边突然响起轻快地人声，清脆急促的音符滑过，由远及近，这一刻世界晶莹剔透。“只要找到下一件开心快乐的事不就好了” 一组和弦激起朵朵浪花，心池泛起层层涟漪。微风拂过，炫丽灿烂的彩虹如晨光般倾泄。 &lt;因为遇见了你，我的世界才充满色彩&gt;感动在心田荡漾，在0.003秒间一道轻巧的电流穿过全身，温暖地使人泪目。正是第一集的开篇让我开始爱上整部作品。 ​ ​ &emsp;&emsp;《CLANNAD》/klæn’nəd/ 罗马音：ku ra na do ​ &emsp;&emsp;中文译名：团子大家族 ​ &emsp;&emsp;由京都动画改编并在2007年开始放送，全剧没有一个多余的场景也没有一句多余的话，所有的一切都在按部就班的雕刻着整部作品，看似不经意间却深深地埋下伏笔，适时再按下幕后无声的开关让这股暖流喷涌而出。其高超的人物刻画和运镜在同期作品中脱颖而出，并后来成为业界的标杆，众多动漫如小埋和龙与虎等皆有向其致敬的情节。剧情紧凑，层次分明。第一部讲述的是青春和逐梦，第二部的主题是成长和生活。在每个人生阶段看都有着不一样的感触，随着年龄的增长泪点会越来越多，孩童时期看或许看的只是无厘头的诙谐镜头，大学时看或许多了对美好青春的怀恋以及成长和逐梦的感触，到迟暮之年再看可能是怀念与亲友共度的美好时光，感慨人生的酸痛苦辣。到那个时候我们会不会想起当初给予自己教导的恩师，会不会想起赋予我们生命抚养我们成人却未曾要求回报的父母呢 。 ​ &emsp;&emsp;歌词幼稚的主题曲《团子大家族》贯穿全剧，每个人在观赏完整部作品后或许都会对主题曲有更深的感悟。故事的结尾响起熟悉的旋律，我这才突然反应过来：人生广义时指“人的生存和生活”，而到来、相遇、陪伴、离别则是每个人的人生。人生是每个人在自己小镇的生活， “喜爱小镇的人住在小镇，喜爱人们的小镇将爱返还。我们爱着小镇，小镇养育我们“ ，而小镇就是充满着生活的喜怒哀乐充满着人情味人间之爱的“团子大家族”啊。 ​ &emsp;&emsp;剧中情节跌宕起伏，发生了各种各种的意外的事情，男主的命运可算是悲惨至极，在故事的高潮发生了一些事情，让朋也开始后悔与古河渚相遇，但重新回到过去再次与古河渚相遇的时候还是向古河渚说：无论今后发生什么，请不要后悔与我相遇。生活多多少少免不了有后悔的事情，遗憾的事情，我们无法改变也无力改变。，但我们不能被动的只因无法改变去接受，要像动画里朋也和渚一样去主动的接受，真心实意的接受，并为之而努力。这种乐观积极的情绪正是CLANNAD想表达的，正如剧集结尾时风子所说：“快乐的事情才刚刚开始。”又把故事引向了未来，人生也是如此，有欢声，有泪语，但未来是永远充满希望的！正是怀着一颗永远积极的心，人物不断成长着。也正因如此《CLANNAD》给我结结实实地上了一堂名为人生的课，对我的三观和爱情观影响深远。 ​ &emsp;&emsp;这个故事让你看到人们一起坚强、努力、温柔、不甘心、不退缩、始终向往幸福的成长过程。 ​ &emsp;&emsp;末了，故事端着一杯冰水，抖了抖身上的隐形披风，在原地站了很久，最后冰水都变成常温的了。 后记： ​ &emsp;&emsp;第二季22集的最后一分钟看完了，怀着满心的感动扫着b站1.2w条评论，想找到一种慰籍一种共鸣。一条一条看过去，无数时而平淡时而温暖的字词撞进柔软的心间，一时间五味杂陈，”没有什么担心的，你可不是一个人啊“，我的视线又湿润模糊了。拼命收藏所有我能找到CLANNAD的插曲，在输入法中费力寻找渚这个字，一起、坚强、努力、温柔、幸福、回来了这几个因你而不再陌生的日语词汇涌上心头…… ​","categories":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}],"tags":[{"name":"观后感","slug":"观后感","permalink":"/tags/观后感/"},{"name":"成长","slug":"成长","permalink":"/tags/成长/"}],"keywords":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"20181212Hexo-Theme-Sakura/","link":"","permalink":"/20181212Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"","slug":"max","date":"1848-09-10T13:40:23.000Z","updated":"2019-09-10T14:12:34.582Z","comments":true,"path":"18480910max/","link":"","permalink":"/18480910max/","excerpt":"","text":"#ifndef Marxism_H #define Marxism_H #include《资本论》 #include《德意志意识形态》 #include《共产党宣言》 ... #endif /* Marxism_H */","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}